<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yaf on Me &amp; Web</title>
    <link>http://lovelock.coding.me/tags/yaf/index.xml</link>
    <description>Recent content in Yaf on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <atom:link href="/tags/yaf/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>又一份Yaf文档——写给正在迷惑的你</title>
      <link>http://lovelock.coding.me/php/Yaf-yet-another-manual-for-human/</link>
      <pubDate>Mon, 01 Feb 2016 11:55:20 +0800</pubDate>
      
      <guid>http://lovelock.coding.me/php/Yaf-yet-another-manual-for-human/</guid>
      <description>

&lt;p&gt;终于把困扰我很久的问题搞定了，好开心。趁着记忆还热乎，一定要把它记下来。&lt;/p&gt;

&lt;p&gt;前几天还和同事抱怨，用Yaf框架的人那么多，但我们身边竟然没有一个人对它的用法很清楚的。真是有些悲哀。几个同事都说鸟哥写的Yaf文档看不明白。&lt;/p&gt;

&lt;p&gt;言归正传，就我自己的学习过程来看，如果你要自己搭建一个Yaf环境，遇到的问题可能主要有以下这些：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;配置Nginx的rewrite规则&lt;/li&gt;
&lt;li&gt;命名空间怎么用&lt;/li&gt;
&lt;li&gt;目录结构设置&lt;/li&gt;
&lt;li&gt;插件的使用&lt;/li&gt;
&lt;li&gt;单Controller多Action配置&lt;/li&gt;
&lt;li&gt;多模块配置&lt;/li&gt;
&lt;li&gt;更多配置文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面就这些问题一一给出解答。&lt;/p&gt;

&lt;h2 id=&#34;配置nginx的rewrite规则&#34;&gt;配置Nginx的rewrite规则&lt;/h2&gt;

&lt;p&gt;让我们直接忽略Apache和Lighttpd吧，默认大家都用Nginx。&lt;/p&gt;

&lt;h3 id=&#34;yaf路由规则&#34;&gt;Yaf路由规则&lt;/h3&gt;

&lt;p&gt;如果你看过官方文档，那4种路由规则我就不说了，只说最简单也是默认的&lt;code&gt;Yaf_Route_Static&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;读了Yaf源码的同学会发现，其实这个规则就是解析&lt;code&gt;request_uri&lt;/code&gt;，用&lt;code&gt;/&lt;/code&gt;把它分开，然后用每一部分去匹配Module/Controller/Action/Param。举个例子吧，假设PATH=/foo/bar/doge，更通俗一点，如果你的域名是&lt;code&gt;http://yaf.dev&lt;/code&gt;，那么这个例子中的完整URL就是&lt;code&gt;http://yaf.dev/foo/bar/doge&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;路由规则做了以下动作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;解析URL，得到PATH部分&lt;/li&gt;
&lt;li&gt;认为&lt;code&gt;foo&lt;/code&gt;是Module，去&lt;code&gt;application.modules&lt;/code&gt;配置中找&lt;code&gt;Foo&lt;/code&gt;（不区分大小写）&lt;/li&gt;
&lt;li&gt;如果找到了&lt;code&gt;modules/Foo&lt;/code&gt;，则继续认为&lt;code&gt;bar&lt;/code&gt;是Controller，查找&lt;code&gt;modules/Foo/BarController&lt;/code&gt;；没找到则会认为&lt;code&gt;foo&lt;/code&gt;是Controller，下面同4&lt;/li&gt;
&lt;li&gt;如果找到了&lt;code&gt;modules/Foo/BarController&lt;/code&gt;，则继续认为&lt;code&gt;doge&lt;/code&gt;是Action，查找&lt;code&gt;modules/Foo/BarController/dogeAction&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样是不是很清晰了？&lt;/p&gt;

&lt;h2 id=&#34;不要这样配&#34;&gt;不要这样配&lt;/h2&gt;

&lt;p&gt;老湿老湿，你不是要说Nginx的rewrite规则怎么配吗，怎么在这讲起了路由规则？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我是要告诉你不要听那些自作聪明的人(没错就是我)把rewrite规则配错!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;也就是说&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rewrite ^/(.*)  /index.php/$1 last;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是绝对正确的，不要看谁谁谁说这不对而写成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rewrite ^/(.*)  /index.php?$1 last;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这才是错误的。&lt;/p&gt;

&lt;p&gt;我的配置:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
    listen 80;

    root /var/www/yaf.ubuntu.com/public;

    index index.php index.html;

    server_name yaf.ubuntu.com;

    location = /favicon.ico {
        access_log off;
        error_log off;
        log_not_found off;
    }

    if (!-e $request_filename) {
        rewrite ^/(.*\.(js|ico|gif|jpg|png|css|bmp|html|xls)$) /public/$1 last;
        rewrite ^/(.*)  /index.php/$1 last;
    }

    location ~ \.php {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/usr/local/var/run/php-fpm-www.sock;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这个配置主要是加上了对静态文件的支持，如果没有多出来的配置，你会经常在日志中看到找不到Favicon.ico.php找不到的500报错。&lt;/p&gt;

&lt;h2 id=&#34;fpm配置&#34;&gt;FPM配置&lt;/h2&gt;

&lt;p&gt;那好，路由规则明白了，rewrite规则好了，毕竟我是PHP脚本啊，得有FPM吧。通常来说，Nginx会给你一个默认的配置，以Debian为例，用apt安装的Nginx自带的default配置&lt;code&gt;location ~ \.php$&lt;/code&gt;段如下（已删除注释，我喜欢用unix socket，不服来打我啊）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location ~ \.php$ {
	include snippets/fastcgi-php.conf;
	fastcgi_pass unix:/var/run/php7.0-fpm.sock;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样没问题，但也仅限于&lt;code&gt;http://yaf.dev/xxxx.php&lt;/code&gt;这种请求。别的都匹配不到啊，别忘了，你请求URL可不是这样的。&lt;/p&gt;

&lt;p&gt;所以，只要它是个请求，都要让它可以经过FPM。改成这样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
	include snippets/fastcgi-php.conf;
	fastcgi_pass unix:/var/run/php7.0-fpm.sock;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了，把这两部分保存一下，重启一下Nginx服务&lt;code&gt;sudo systemctl restart nginx&lt;/code&gt;，访问一下，哈，爽。&lt;/p&gt;

&lt;h3 id=&#34;静态文件怎么办&#34;&gt;静态文件怎么办？&lt;/h3&gt;

&lt;p&gt;这样配置，访问Action什么的是没问题了，但如果要访问这个域名下的静态文件，css/js啥的，就有问题了，这就需要在上面的&lt;code&gt;location /&lt;/code&gt;段前面再添加一些匹配到这些静态文件的段，让它找到对应的文件。这里就不再赘述。&lt;/p&gt;

&lt;h2 id=&#34;命名空间怎么办&#34;&gt;命名空间怎么办？&lt;/h2&gt;

&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;

&lt;p&gt;新时代的我们当然想用命名空间了，起码我是不想写那么长的类名。&lt;/p&gt;

&lt;p&gt;可喜的是Yaf只需要一条配置就可以爽快的支持PSR-4规范的命名空间。
可惜的是Yaf的这条配置是全局的，如果你的应用和别的应用公用PHP配置，而别人不用，那就没办法了。&lt;/p&gt;

&lt;p&gt;这条配置就是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;;php.ini
yaf.use_namespace=1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;举例&#34;&gt;举例&lt;/h3&gt;

&lt;p&gt;我们都需要Http类吧，假设我写个HttpFoundation\Request类，可以在&lt;code&gt;library&lt;/code&gt;下新建&lt;code&gt;HttpFoundation&lt;/code&gt;目录，在其中新建&lt;code&gt;Request.php&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// HttpFoundation/Request.php
namespace HttpFoundation;

class Request
{
	public function get()
	{
		echo &amp;quot;I am going to send a GET request&amp;quot;;
		exit;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就注册了一个&lt;code&gt;HttpFoundation\Request&lt;/code&gt;类，在Controller中使用它只需要这样&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Yaf\Controller_Abstract;
use HttpFoundation\Request;

class FooController extends Controller_Abstract
{
	public function barAction()
	{
		$request = new Request();
		$request-&amp;gt;get();
		exit;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;再远一点&#34;&gt;再远一点？&lt;/h3&gt;

&lt;p&gt;是不是感受到了鸟哥的高瞻远瞩？其实我们还可以想的更多一点，既然可以自己写个HttpFoundation包了，你有没有想到Composer？因为多数时候这些基础类库都有现成的，用Composer安装就好，既然Yaf已经提供了性能好于autoloader的Yaf_Loader，何乐而不用呢？你甚至都可以引入第三方的ORM，比如Doctrine，第三方模板引擎Twig——对，没错，我就是Symfony的粉丝。&lt;/p&gt;

&lt;h2 id=&#34;目录结构设置&#34;&gt;目录结构设置&lt;/h2&gt;

&lt;p&gt;读一下Yaf源代码就特别清晰的看到默认的目录设置了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── application
│   ├── Bootstrap.php
│   ├── controllers
│   │   ├── Another.php
│   │   └── Index.php
│   ├── library
│   │   ├── Helper
│   │   └── HttpFoundation
│   │       └── Request.php
│   ├── models
│   ├── modules
│   │   └── Foo
│   │       └── controllers
│   │           └── Foo.php
│   ├── plugins
│   └── views
├── conf
│   ├── app.ini
│   └── db.ini
└── public
    └── index.php
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;application&lt;/p&gt;

&lt;p&gt;这是应用的主目录。&lt;/p&gt;

&lt;p&gt;想让应用能最简单的跑起来，得有Controller，也就是controllers目录，这里面放的是IndexModule的东西。&lt;/p&gt;

&lt;p&gt;底层用到的一些类库，放在library里。&lt;/p&gt;

&lt;p&gt;数据库操作放在models里。&lt;/p&gt;

&lt;p&gt;多模块放在modules里。像上面的树图里一样，每个module里还有相应的Controller。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;conf&lt;/p&gt;

&lt;p&gt;存放配置文件。&lt;/p&gt;

&lt;p&gt;我看多数时候是把它放在application里的，但我更倾向于把它放在和application同级目录下。其中的app.ini是Yaf框架的基础配置，里面需要包含Yaf的『唯一一个』必选配置项&lt;code&gt;application.directory&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;public&lt;/p&gt;

&lt;p&gt;存放index.php和静态文件。&lt;/p&gt;

&lt;p&gt;这里是用户可以直接访问的文件。静态文件放在这里最合适不过了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;插件的使用&#34;&gt;插件的使用&lt;/h2&gt;

&lt;p&gt;应用上线后Nginx的配置就不太好改了，但我们可以随意修改代码啊，所以如果需要对路由规则做一些修改，可以写个插件。下面以Route插件为例，介绍插件的使用。&lt;/p&gt;

&lt;h3 id=&#34;新建插件&#34;&gt;新建插件&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;application/plugins&lt;/code&gt;目录里新建&lt;code&gt;Route.php&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Yaf\Plugin_Abstract;
use Yaf\Request_Abstract;
use Yaf\Response_Abstract;

class RoutePlugin extends Plugin_Abstract
{
	public function routerStartup(Request_Abstract $request, Response_Abstract $response)
	{
		// some logic here
		$request-&amp;gt;setModule(&#39;foo&#39;);
		$request-&amp;gt;setController(&#39;bar&#39;);
		$request-&amp;gt;setAction(&#39;doge&#39;);
	}
	....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;注册插件&#34;&gt;注册插件&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Bootstrap.php

use Yaf\Bootstrap_Abstract;
use Yaf\Dispatcher;

class Bootstrap extends Bootstrap_Abstract
{
	public function _initPlugin(Dispatcher $dispatcher)
	{
		$dispatcher-&amp;gt;regiserPlugin(new RouterPlugin());
	}
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时候你可以试一下，所有请求都会被路由到FooModule/BarController/dogeAction了。&lt;/p&gt;

&lt;h2 id=&#34;单controller多action配置&#34;&gt;单Controller多Action配置&lt;/h2&gt;

&lt;p&gt;这个问题困扰我最久，最不理解的就是为什么要一个Controller里面只有一个indexAction，然后其他的路由还需要传一个action参数来自己做路由。其实默认的Yaf_Route_Static自己就支持这种写法的。只要保证&lt;code&gt;application.dispatcher.defaultRoute&lt;/code&gt;的值为空或&lt;code&gt;static&lt;/code&gt;即可。&lt;/p&gt;

&lt;h2 id=&#34;多模块配置&#34;&gt;多模块配置&lt;/h2&gt;

&lt;p&gt;在目录结构设置一节中已经说过怎么创建多模块。那么多模块有什么用呢？&lt;/p&gt;

&lt;p&gt;假设我们要做一个后台，不同模块是需要不同的访问权限的，该怎么办？我的想法是这样，做一个权限控制的plugin，先检查用户身份，然后&lt;code&gt;$request-&amp;gt;getModule()&lt;/code&gt;，如果要访问的是该用户不具有权限的模块，就给跳到一个403页。&lt;/p&gt;

&lt;h2 id=&#34;配置分节&#34;&gt;配置分节&lt;/h2&gt;

&lt;p&gt;假设这样一个场景，你线上和线下资源配置肯定是不一样的，但又有些是一样的，怎么办？还以&lt;code&gt;db.ini&lt;/code&gt;为例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[db]
adapter=pdo_mysql

[prod:db]
host=&amp;quot;DB_HOST&amp;quot;
port=&amp;quot;DB_PORT&amp;quot;

[dev:prod]
host=&amp;quot;DB_HOST_DEV&amp;quot;
port=&amp;quot;DB_PORT_DEV&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种情况下可以写一个工具类，因为我觉得这个Yaf\Config\Ini提供的API并不太好用，先要初始化才能用。我做一层封装，不成想竟然发现了很方便的从生产环境/开发环境/测试环境的方法。工具类如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
namespace Your\Name\Space;
use Yaf\Config\Ini;

class Conf
{
    public static function get($key)
    {
        $filename = PATH/TO/CONF . &#39;/&#39; . explode(&#39;.&#39;, $key) . &#39;.ini&#39;;

        if (is_file($filename) &amp;amp;&amp;amp; is_readable($filename)) {
            $config = (new Ini($filename, ENV))-&amp;gt;get($key);
            if (is_a($config, &#39;Yaf\Config\Ini&#39;)) {
                $config = $config-&amp;gt;toArray();
            }
        } else {
            $config = null;
        }

        return $config;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这个工具类的作用是支持&lt;code&gt;Your\Name\Space\Conf::get(&#39;foo.bar.good&#39;);&lt;/code&gt;的方式取值。如果配置文件是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[test]
foo.bar.good = &#39;good foo&#39;
foo.bar.better = &#39;better foo&#39;

[prod:test]
foo.bar.better = &#39;best foo&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那用&lt;code&gt;Your\Name\Space\Conf::get(&#39;foo.bar&#39;);&lt;/code&gt;取出的就是包含&lt;code&gt;good&lt;/code&gt;和&lt;code&gt;better&lt;/code&gt;的一个数组，如果是&lt;code&gt;Your\Name\Space\Conf::get(&#39;foo.bar.good&#39;);&lt;/code&gt;这样，就是&lt;code&gt;good foo&lt;/code&gt;这个字符串。&lt;/p&gt;

&lt;p&gt;重点是对生产环境的切换。注意实例化&lt;code&gt;Ini&lt;/code&gt;类的时候的那个&lt;code&gt;ENV&lt;/code&gt;变量，你可以在&lt;code&gt;/public/index.php&lt;/code&gt;中&lt;code&gt;define&lt;/code&gt;这个常量，然后又从一个公共的工具类中取出配置，所以只需要在修改&lt;code&gt;index.php&lt;/code&gt;里面的&lt;code&gt;ENV&lt;/code&gt;的定义，就可以方便的在各种环境之间切换了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
