<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>语言特性 on Me &amp; Web</title>
    <link>http://lovelock.coding.me/tags/%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/</link>
    <description>Recent content in 语言特性 on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <lastBuildDate>Thu, 19 Jan 2017 15:21:43 +0800</lastBuildDate>
    <atom:link href="/tags/%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>关于PHP接口特性的一个发现</title>
      <link>http://lovelock.coding.me/php/about-php-interface/</link>
      <pubDate>Thu, 19 Jan 2017 15:21:43 +0800</pubDate>
      
      <guid>http://lovelock.coding.me/php/about-php-interface/</guid>
      <description>&lt;p&gt;这两天看一本PHP的进阶书，发现了一些之前没有注意的特性。比如PHP接口的设计方式和它对实现该接口的类的约束就和通常的语言(比如Java）不一样。&lt;/p&gt;

&lt;p&gt;举一个简单的例子，要写一个配置管理类，这个类为了适配不同的配置文件格式，比如&lt;code&gt;ini&lt;/code&gt;,&lt;code&gt;yaml&lt;/code&gt;等，就需要一个接口来约束这些具体的实现。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
  
  interface ConfigInterface
  {
    public function get($name);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
  class IniConfig implements ConfigInterface
  {
    public function get($name)
      {
        xxxxx;
      }
  
  	public function fetch($name)
      {
        xxxxxx;
      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
  class YamlConfig implements ConfigInterface
  {
    public function get($name)
      {
        xxxxxx;
      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
  function check(ConfigInterface $config)
  {
    $config-&amp;gt;fetch(&#39;foo&#39;);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你按类似上面的结构写完执行你就会发现一个很神奇的特性，这段代码竟然是可以执行的（忽略我为了偷懒省略了具体实现吧）。&lt;/p&gt;

&lt;p&gt;但是仔细想想，我在方法&lt;code&gt;check&lt;/code&gt;里面用接口解耦的目的是什么呢？就是为了接受不同实现，而如果这些实现自己的独有的方法在这里都可以调用，这个约束的存在还有什么意义呢？所以，我理解的PHP的接口的作用仅仅限于两点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;规定每个实现一定要实现相应的方法&lt;/li&gt;
&lt;li&gt;方便IDE进行自动提示和补全&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也就是说，PHP的接口更多意义上是一个&lt;strong&gt;约定&lt;/strong&gt;，而不是&lt;strong&gt;规定&lt;/strong&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
