<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Me &amp; Web</title>
    <link>http://lovelock.coding.me/tags/blog/index.xml</link>
    <description>Recent content in Blog on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <atom:link href="/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>静态博客工具使用体验</title>
      <link>http://lovelock.coding.me/blog/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Fri, 03 Jul 2015 15:04:01 +0000</pubDate>
      
      <guid>http://lovelock.coding.me/blog/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid>
      <description>&lt;p&gt;我这体验了两个博客工具之后发现，果然这种技术不是很复杂的东西还是后来者更有优势。&lt;/p&gt;

&lt;p&gt;首先接触的是Octopress，但随着写的东西越来越多（其实也没有多少了），每次generate的时间越来越长，甚至要几分钟了，导致我很不愿意用它了。经常听说Ruby很慢，但没想到在本地处理个文本还那么慢，这个时候我已经萌生了放弃它转而使用其他工具的想法。&lt;/p&gt;

&lt;p&gt;于是我发现了Hexo，这是个基于Node.js的工具，想想V8带来的性能提升就知道这个一定是Blading Speed的东西了。果不其然，把原来所有的文章导入到hexo里，几秒钟的时间就生成好了静态页面，每次修改时只生成改动的文件，这就使其效率更进一步的提升了。&lt;/p&gt;

&lt;p&gt;有些人可能会说，先发的工具会有一定的积淀啊。&lt;/p&gt;

&lt;p&gt;此话不假，但有时候作者的想法跑偏了就不知道未来的方向在哪里了。本来Octopress用rake作为命令行工具，我觉得还好吧，不算长，结果不知道作者怎么想的（我知道他写了一篇文章用来介绍2.0到3.0的转变），但我还是觉得它的方向偏了。&lt;/p&gt;

&lt;p&gt;就其本质而言，并没有多大的变化，反而是命令变的又臭又长，这可以算作历史遗留问题，但这个负担其实不应该用户来承担，是的，我们可以设置几个alias来更简单的执行这些命令，但如果真像所有这些静态页面生成工具的作者说的，用户不需要任何编程技术，那么为什么还要我们输入那么长的命令呢？&lt;/p&gt;

&lt;p&gt;相反，hexo的使用就简单明了。而且，为了对用户更友好，甚至给了简写的命令，让我一下子就记住了。&lt;/p&gt;

&lt;p&gt;g - generate
s - server
d - deploy&lt;/p&gt;

&lt;p&gt;还有比这更惬意的吗？想象一下，当你写了很多文章，只需要执行一个&lt;code&gt;hexo g&lt;/code&gt;眨眼间就生成了整个文章，真是令人激动啊。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
