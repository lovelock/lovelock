<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Me &amp; Web</title>
    <link>http://unixera.com/tags/bower/index.xml</link>
    <description>Recent content on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>frostwong@gmail.com (Frost Wong)</managingEditor>
    <webMaster>frostwong@gmail.com (Frost Wong)</webMaster>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <atom:link href="/tags/bower/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bower使用简明教程</title>
      <link>http://unixera.com/javascript/2015-10-08-Bower%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 08 Oct 2015 18:10:45 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://unixera.com/javascript/2015-10-08-Bower%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;p&gt;最近接触到Node.js，于是摇身一变前后端全部用JavaScript实现，这样其实导致界限不清晰了——其实很清晰，但当你看一个.js文件的时候总是要想一下这是前端逻辑还是后端逻辑，感觉怪怪的。后端需要的模块可以用npm这个大杀器安装，虽然前端的依赖也可以用它解决，但其实有更专业的解决方案——&lt;a href=&#34;http://bower.io&#34;&gt;bower&lt;/a&gt;。官方简介里面其实并没有提到它是专门用来解决前端依赖的，看它的用例以及别的项目的使用情况也可以看到
，通常的用法就是&lt;code&gt;&amp;lt;script src=&amp;quot;bower_components/xxx_lib/xxxx.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;，这就已经很明显了，不是吗？&lt;/p&gt;

&lt;p&gt;以我这次项目中用到的&lt;code&gt;webrtc-adapter&lt;/code&gt;为例，写一个简单的使用流程。&lt;/p&gt;

&lt;p&gt;首先要安装它&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install [-g] bower&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;什么？没有装npm？那你可以先去搜索一下了。这里我提一点，因为Debian打包时把Node.js的二进制文件命名为&lt;code&gt;nodejs&lt;/code&gt;，而很多第三方包在用的时候第一行其实是&lt;code&gt;#!/usr/bin/env node&lt;/code&gt;，这样就会提示找不到Node.js的可执行文件，遇到这个情况有两种解决方案。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装nodejs-legacy包&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install nodejs-legacy&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自己创建一个node&lt;a href=&#34;https://en.wikipedia.org/wiki/Symbolic_link&#34;&gt;符号链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo ln -s /usr/bin/nodejs /usr/bin/node&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后要知道需要用的模块的名字，比如我这是在&lt;a href=&#34;https://github.com/webrtc/adapter&#34;&gt;adapter&lt;/a&gt;的文档里发现的这个名字。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower install webrtc-adapter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装完成之后会在当前目录创建一个名为&lt;code&gt;bower_components&lt;/code&gt;的目录，其实就是把你要的repo下载到本地了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;需要注意的是，当我们选择了使用bower作为包管理工具时，就默认排除了我更喜欢的另外一种方式——CDN。对，为了减轻自己的服务器的压力，通常会把一些公用的库的js的引用放在那些免费提供的CDN上，比如又拍云等等。那既然选择了bower的方式，就继续吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;假设我们是在一个git repo里面进行开发，你肯定不希望提交的时候把bower_components里的东西也提交，而是只保留一个清单文件，这个清单文件列出了已经下载的库的名称和版本信息。所以&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;那么问题来了，如果写完这个之后我又加了个依赖，难道还要手工修改&lt;code&gt;bower.json&lt;/code&gt;文件吗？当然不需要！只需要在安装的时候加个参数bower就帮你完成了&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bower install jquery --save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这时会出现一个很神奇的交互界面，放心的填写自己的项目信息吧，注意前面的一长串信息都引用的库(依赖)没有关系，而是你自己的项目信息。最后会提示是否把已经下载的库加入本项目的依赖中，而且默认是Y（是），所以直接回车就行。一路回车就会看到当前目录下生成了一个&lt;code&gt;bower.json&lt;/code&gt;文件。但这还没完，这解决了不需要提交下载的依赖文件的问题，但没有解决不让git提交它们的问题，这时就需要&lt;code&gt;.gitignore&lt;/code&gt;文件出场了。&lt;/p&gt;

&lt;p&gt;在当前目录下新建&lt;code&gt;.gitignore&lt;/code&gt;文件，添加以下内容&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node_modules
bower_components
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经过上面的步骤，就可以放心的提交最小化的项目了。而部署项目的时候只需要再执行&lt;code&gt;bower install&lt;/code&gt;和&lt;code&gt;npm install&lt;/code&gt;就可以了。&lt;/p&gt;

&lt;p&gt;更多详细信息可以参考&lt;code&gt;bower help&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;关于&lt;code&gt;npm install&lt;/code&gt;需要的&lt;code&gt;package.json&lt;/code&gt;这里没有提到，有兴趣的同学可以自行查找。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
