<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bootstrap on Me &amp; Web</title>
    <link>http://lovelock.coding.me/tags/bootstrap/</link>
    <description>Recent content in Bootstrap on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <lastBuildDate>Sun, 28 Feb 2016 21:40:04 +0800</lastBuildDate>
    <atom:link href="/tags/bootstrap/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bootstrap插件DataTables实现服务器端分页</title>
      <link>http://lovelock.coding.me/javascript/bootstrap-plugin-datatables/</link>
      <pubDate>Sun, 28 Feb 2016 21:40:04 +0800</pubDate>
      
      <guid>http://lovelock.coding.me/javascript/bootstrap-plugin-datatables/</guid>
      <description>

&lt;p&gt;我们知道，PHP和MySQL实现分页的基本思路是limit，页面上有个page(第几页）和count(每次取出几个），PHP把它传递给后端MySQL，查询时在条件查询的基础上加上&lt;code&gt;limit {($page - 1) * $count, $count}&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但是，自己实现PHP分页也是有不少繁琐的问题需要解决的，比如分页要最多显示几个，两头如何处理，样式设计等等，既然有了Bootstrap这个大框架，各种解决方案就层出不穷了。&lt;/p&gt;

&lt;p&gt;废话不多说，今天要讲一下用Bootstrap的插件DataTables做一个带分页的表格。&lt;/p&gt;

&lt;p&gt;DataTables官方文档给的例子是一次把数据取出，然后在前端做分页处理。这样的好处是减少了每次查询都要请求网络，坏处则是如果数据太多，前端肯定就扛不住了。文档也说了，如果数据量在10000以内，可以在前端做分页，100000以上就在服务端做，中间的量就衡量自己的数据和服务器的处理能力做决定了。&lt;/p&gt;

&lt;p&gt;本文的基础是PHP内置Web Server和Bootstrap的模板SB-Admin2。&lt;/p&gt;

&lt;h2 id=&#34;前端处理分页&#34;&gt;前端处理分页&lt;/h2&gt;

&lt;p&gt;最直观的方法就是把所有的数据自己组织好，用foreach组织&lt;code&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/code&gt;，再加上一个&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function () {
    $(&#39;#datatable-example&#39;).DataTable({
        responsive: true
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，插件就会帮你把你想要的效果展示出来了，再加上实时搜索，效果简直不能更赞。&lt;/p&gt;

&lt;p&gt;但这在实际应用中用的应该还是比较少，毕竟稍微上点规模的公司需要处理的内容就不止10000那么少了。&lt;/p&gt;

&lt;h2 id=&#34;后端处理分页&#34;&gt;后端处理分页&lt;/h2&gt;

&lt;p&gt;先要理解几个概念。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;draw 请求的当前次数&lt;/li&gt;
&lt;li&gt;start 返回结果的开始位置&lt;/li&gt;
&lt;li&gt;length 返回结果的长度&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我这里为了简单起见，把数组当做数据源了，根据传入的参数不同，返回数组的不同部分。&lt;/p&gt;

&lt;p&gt;一般来说，返回的数据里需要这些字段&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;draw&amp;quot;: 1,
  &amp;quot;recordsTotal&amp;quot;: 57,
  &amp;quot;recordsFiltered&amp;quot;: 57,
  &amp;quot;data&amp;quot;: [
    [
      &amp;quot;Airi&amp;quot;,
      &amp;quot;Satou&amp;quot;,
      &amp;quot;Accountant&amp;quot;,
      &amp;quot;Tokyo&amp;quot;,
      &amp;quot;28th Nov 08&amp;quot;,
      &amp;quot;$162,700&amp;quot;
    ],
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在页面上需要有&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;table class=&amp;quot;table table-striped table-bordered table-hover&amp;quot; id=&amp;quot;datatable-example&amp;quot;&amp;gt;
    &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;Column1&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Column2&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Column3&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Column4&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Column5&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Column6&amp;lt;/th&amp;gt;
        &amp;lt;tr&amp;gt;
    &amp;lt;/thead&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后把&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function () {
    $(&#39;#datatable-example&#39;).DataTable({
        responsive: true
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;替换成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function () {
    $(&#39;#datatable-example&#39;).DataTable({
        responsive: true,
        serverSide: true,
        processing: true,
        ajax: &amp;quot;ajax.php&amp;quot;
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，serverSide选项表示使用服务端分页，processing表示加载表格的时候会在表格上覆盖一个『加载中』的类似弹层，而ajax就是数据的来源了。具体代码见。。&lt;/p&gt;

&lt;p&gt;那你可能要说了，我的数据返回的可是正宗的HashTable，我指明是HashTable是因为PHP中数组也是HashTable，指的是Python里的字典。该怎么办呢？&lt;/p&gt;

&lt;p&gt;相应的，如果返回的每列数据是这样的(其实这才是从数据库中取出来的样子)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
      &amp;quot;first_name&amp;quot;: &amp;quot;Jennifer&amp;quot;,
      &amp;quot;last_name&amp;quot;: &amp;quot;Chang&amp;quot;,
      &amp;quot;position&amp;quot;: &amp;quot;Regional Director&amp;quot;,
      &amp;quot;office&amp;quot;: &amp;quot;Singapore&amp;quot;,
      &amp;quot;start_date&amp;quot;: &amp;quot;14th Nov 10&amp;quot;,
      &amp;quot;salary&amp;quot;: &amp;quot;$357,650&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那只需要把&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function () {
    $(&#39;#datatable-example&#39;).DataTable({
        responsive: true,
        serverSide: true,
        processing: true,
        ajax: &amp;quot;ajax.php&amp;quot;
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;替换成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function () {
    $(&#39;#datatable-example&#39;).DataTable({
        responsive: true,
        serverSide: true,
        processing: true,
        ajax: &amp;quot;ajax.php&amp;quot;,
        columns: [
            { &amp;quot;data&amp;quot;: &amp;quot;first_name&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;last_name&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;position&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;office&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;start_date&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;salary&amp;quot; }
        ]
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以了。&lt;/p&gt;

&lt;p&gt;这是数据库的最简单的情况，那如果我用了ORM，取出来的就是对象了，这就免不了『嵌套对象』了。不管是Python的数组（PHP中key是数组的）还是字典（PHP中key是字符串的），都是一样的处理方式，都是最直观的表示法，把&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function () {
    $(&#39;#datatable-example&#39;).DataTable({
        responsive: true,
        serverSide: true,
        processing: true,
        ajax: &amp;quot;ajax.php&amp;quot;,
        columns: [
            { &amp;quot;data&amp;quot;: &amp;quot;first_name&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;last_name&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;position&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;office&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;start_date&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;salary&amp;quot; }
        ]
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;替换成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function () {
    $(&#39;#datatable-example&#39;).DataTable({
        responsive: true,
        serverSide: true,
        processing: true,
        ajax: &amp;quot;ajax.php&amp;quot;,
        columns: [
            { &amp;quot;data&amp;quot;: &amp;quot;first_name&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;last_name.other&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;position.2&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;office&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;start_date&amp;quot; },
            { &amp;quot;data&amp;quot;: &amp;quot;salary&amp;quot; }
        ]
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bootstrap Modal用法总结</title>
      <link>http://lovelock.coding.me/javascript/2015-05-06-bootstrap-modalyong-fa-zong-jie/</link>
      <pubDate>Wed, 06 May 2015 23:15:41 +0800</pubDate>
      
      <guid>http://lovelock.coding.me/javascript/2015-05-06-bootstrap-modalyong-fa-zong-jie/</guid>
      <description>

&lt;p&gt;这段时间前端后端同时写，对jQuery和Bootstrap用的比较多，说实话我对Modal很感兴趣，单纯的就是因为它好看，并且看起来友好，不像alert那么暴力，FF的实现还好，而Chrome的alert直接忽视所有其他操作，只能选择不再弹出，但只要选择了这个不再弹出，在重启这个页面之前（刷新没用）就不会再弹出了，真不明白这是什么逻辑。当然最重要的一点是Modal可以交互。&lt;/p&gt;

&lt;p&gt;下面简单说说Modal的用法，当然基本上来自&lt;a href=&#34;http://getbootstrap.com/javascript/&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;依赖&#34;&gt;依赖&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;没有对它们进行安全版本测试，就现在而言，使用最新的版本总是没有问题的。&lt;/p&gt;

&lt;h2 id=&#34;基本组成&#34;&gt;基本组成&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.modal&lt;/code&gt; Modal的主体div

&lt;ul&gt;
&lt;li&gt;通常我们会给它指定一个id，因为你总是会希望能更细粒度的控制一个modal的行为吧，况且文档中也说不可以使用叠加的modal，也就是说，同一时间一个页面上只能出现一个modal，如果直接使用&lt;code&gt;.modal&lt;/code&gt; 来控制它的显示和隐藏，早晚会出现问题的&lt;/li&gt;
&lt;li&gt;还有一个属性是&lt;code&gt;role&lt;/code&gt; ，这个属性很有意思，其实没有什么特别的用途，只是在阅读代码时让你知道它的作用是一个对话框，为什么需要这个呢？因为&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 这个标签本身不能表达这个意思，比如&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 标签，你一看就知道它一定是一个下拉选择器，但&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 呢？所以，这个&lt;code&gt;role&lt;/code&gt; 就是用来说明标签本身无法说明的一些内容，比较常见的还有在一个&lt;code&gt;.nav .nav-tabs&lt;/code&gt; 中的&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 标签中，会添加&lt;code&gt;role=&amp;quot;option&amp;quot;&lt;/code&gt; 这样的说明，就是告诉开发者这是一个功能的多个选项之一&lt;/li&gt;
&lt;li&gt;通常我们会喜欢加上一些动画，最常用的是&lt;code&gt;.fade&lt;/code&gt; ，当然如果你更喜欢直接，也可以忽视它&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tabIndex=&amp;quot;-1&amp;quot;&lt;/code&gt; &lt;a href=&#34;http://jehiah.cz/a/tabindex&#34;&gt;关于这个属性的解释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.modal-dialog&lt;/code&gt; 关于这个没有找到更多的解释，我想大概是因为弹出的是一个对话框吧，没有见到更多的类型

&lt;ul&gt;
&lt;li&gt;同样这个class也可以有叠加选项，&lt;code&gt;.modal-lg/.modal-md/.modal-sm&lt;/code&gt; 分别表示大中小三种型号&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.modal-content&lt;/code&gt; 当然就是modal的内容了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.modal-header&lt;/code&gt; 内容的第一层，头部

&lt;ul&gt;
&lt;li&gt;可以在其中放置一个关闭按钮，比如右上角的一个&lt;code&gt;x&lt;/code&gt; 等，为了诸如屏幕阅读器之类的用户辅助工具更好的工作，可以在这个关闭按钮上加上&lt;code&gt;aria-labelledby&lt;/code&gt; 属性，值是&lt;code&gt;.modal-title&lt;/code&gt; 的&lt;code&gt;id&lt;/code&gt; ，当然也可以手动用&lt;code&gt;aria-label=&amp;quot;myModalTitle&amp;quot;&lt;/code&gt; 来指定，但动态的写法更方便，不是吗？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.modal-title&lt;/code&gt; 放置在&lt;code&gt;.modal-header&lt;/code&gt; 中，modal的标题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.modal-body&lt;/code&gt;  modal的正文部分，需要显示的主要内容就在这个部分了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.modal-footer&lt;/code&gt; 通常用来放置确认/关闭等按钮

&lt;ul&gt;
&lt;li&gt;当然我们需要一个关闭modal的按钮，这个按钮需要添加一个&lt;code&gt;data-dismiss=&amp;quot;modal&amp;quot;&lt;/code&gt; 的属性才能正确的完成功能，和上面那个&lt;code&gt;x&lt;/code&gt; 按钮的功能是一样的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;//jsfiddle.net/frostwong/ve96c6fr/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;经过上面这几步，一个完整的modal对话框就完成了，但问题来了，怎么触发它呢？&lt;/p&gt;

&lt;p&gt;下面来说一下modal的触发方式。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;按钮
这个应该是最常用的方式。需要注意的有几点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data-toggle=&amp;quot;modal&amp;quot;&lt;/code&gt; 指明这个按钮要触发的widget类型是modal，常见的还有
&lt;code&gt;html
data-toggle=&amp;quot;modal&amp;quot;
data-toggle=&amp;quot;collapse&amp;quot;
data-toggle=&amp;quot;dropdown&amp;quot;
data-toggle=&amp;quot;tab&amp;quot;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data-target=&amp;quot;#myModal&amp;quot;&lt;/code&gt; 指明这个按钮要触发的modal的id是&lt;code&gt;myModal&lt;/code&gt;
有了这两个属性点击这个按钮时就可以触发这个modal了。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JavaScript方法
&lt;code&gt;$(&#39;#myModal&#39;).modal(options)&lt;/code&gt;
关于&lt;code&gt;options&lt;/code&gt;，有以下几个选项&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;backdrop，值可选布尔值(&lt;code&gt;true/false&lt;/code&gt;)或&lt;code&gt;&#39;static&#39;&lt;/code&gt; ，默认值是&lt;code&gt;true&lt;/code&gt;，当设置为&lt;code&gt;false&lt;/code&gt; 或&lt;code&gt;&#39;static&#39;&lt;/code&gt; 时点击modal外的区域modal不消失，反之会消失&lt;/li&gt;
&lt;li&gt;keyboard，点击&lt;code&gt;Escape&lt;/code&gt; 键时modal是否消失，默认是&lt;code&gt;true&lt;/code&gt;，可选&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;show，初始化时modal是否显示，默认&lt;code&gt;false&lt;/code&gt; 不显示
&lt;code&gt;javascript
$(&#39;#myModal&#39;).modal({
	backdrop: &#39;static&#39;,
	keyboard: false,
	show: true
});
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;modal方法&#34;&gt;Modal方法&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$(&#39;#myModal&#39;).modal(options)&lt;/code&gt; 上面已经说过了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;#myModal&#39;).modal(&#39;toggle&#39;)&lt;/code&gt; 手动显示或隐藏modal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;#myModal&#39;).modal(&#39;show&#39;)&lt;/code&gt; 手动显示modal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;#myModal&#39;).modal(&#39;hide&#39;)&lt;/code&gt; 手动隐藏modal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;#myModal&#39;).modal(&#39;handleUpdate&#39;)&lt;/code&gt; 在modal处于显示状态时，如果它的高度有变化，就需要执行这个方法（也仅有这个情况下需要执行这个方法），它会在右边产生一个滚动条，并且把内容向左跳一下。&lt;/li&gt;
&lt;/ol&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;//jsfiddle.net/frostwong/ya6956pp/embedded/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;modal事件&#34;&gt;Modal事件&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;show.bs.modal&lt;/code&gt; 当&lt;code&gt;show&lt;/code&gt; 方法执行时，立即触发该事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shown.bs.modal&lt;/code&gt; 当&lt;code&gt;show&lt;/code&gt; 方法执行时，会等待CSS效果完成之后再触发该事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hide.bs.modal&lt;/code&gt; 同1，&lt;code&gt;hide&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hidden.bs.modal&lt;/code&gt; 同2， &lt;code&gt;hide&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;关于Modal还有使用Bootstrap网格系统的部分，但这个部分至少对目前来说用处不多，暂不提。
&lt;code&gt;options&lt;/code&gt; 中还包括一个&lt;code&gt;remote&lt;/code&gt; 选项，因为已经被废弃，将来（4.0）版本中会移除，故对该主体和它相关的&lt;code&gt;loaded.bs.modal&lt;/code&gt; 都未涉及。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>
