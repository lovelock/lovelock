<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Me &amp; Web</title>
    <link>http://lovelock.coding.me/tags/iframe/index.xml</link>
    <description>Recent content on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>frostwong@gmail.com (Frost Wong)</managingEditor>
    <webMaster>frostwong@gmail.com (Frost Wong)</webMaster>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <atom:link href="/tags/iframe/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iframe间通信方法总结</title>
      <link>http://lovelock.coding.me/javascript/2015-08-10-iframe%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 10 Aug 2015 10:15:56 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/javascript/2015-08-10-iframe%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>

&lt;p&gt;在对外提供Web组件时常常会遇到iframe间的通信问题，本文旨在总结目前主流的解决方案，并给出了详细的代码示例。&lt;/p&gt;

&lt;p&gt;解决方案大体有以下几种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;window.postMessage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cross Frame(aba)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.name&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而窗体间的通信问题分为以下几种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;child和parent之间&lt;/li&gt;
&lt;li&gt;child和child之间&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本文代码示例的&lt;a href=&#34;https://github.com/lovelock/cross-iframe-communication-exmaple.git&#34;&gt;代码仓库&lt;/a&gt;。
下面详细介绍这些方法。&lt;/p&gt;

&lt;h2 id=&#34;window-postmessage&#34;&gt;&lt;code&gt;window.postMessage&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;这种方法有局限，因为是HTML5的API，所以只支持到IE8及以上的IE浏览器，其他现代浏览器当然没有问题。&lt;/p&gt;

&lt;h3 id=&#34;child和parent之间的通信&#34;&gt;child和parent之间的通信&lt;/h3&gt;

&lt;p&gt;child和parent之间用&lt;code&gt;window.postMessage&lt;/code&gt;通信不受&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&#34;&gt;同源策略&lt;/a&gt;的限制，只需要在被调用方判断一下是否是可以接受的调用方就可以了。具体是在parent（也就是主window）里实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;iframe src=&amp;quot;http://iframe1.unixera.com/iframe1.html&amp;quot; id=&amp;quot;iframe1&amp;quot;&amp;gt;
&amp;lt;/iframe&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; id=&amp;quot;send&amp;quot;/&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span&amp;gt;Message from Child&amp;lt;/span&amp;gt;
    &amp;lt;div id=&amp;quot;message_handler&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;quot;iframe1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;window.onload = function () {
    var message_handler = document.getElementById(&amp;quot;message_handler&amp;quot;);
    var btn = document.getElementById(&amp;quot;send&amp;quot;);
    
    function sendMessage(e) {
        e.preventDefault();
        document.getElementById(&amp;quot;iframe1&amp;quot;).contentWindow.postMessage(&amp;quot;Welcome to unixera.com&amp;quot;, &amp;quot;http://iframe1.unixera.com&amp;quot;);
    }
    
    function receiveMessage(e) {
        if (e.origin !== &amp;quot;http://container.unixera.com&amp;quot;) {
            return;
        }
        
        message_handler.innerHTML = e.data;
        
        e.source.postMessage(&amp;quot;Response from parent&amp;quot;, e.origin);
    }
    
    if (window.addEventListener) {
        btn.addEventListener(&#39;click&#39;, sendMessage, false);
        addEventListener(&#39;message&#39;, receiveMessage, false);
    } else {
        btn.attachEvent(&#39;onclick&#39;, sendMessage);
        attachEvent(&#39;onmessage&#39;, receiveMessage);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;child iframe的代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; id=&amp;quot;send&amp;quot;/&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;span&amp;gt;Message from Parent&amp;lt;/span&amp;gt;
    &amp;lt;div id=&amp;quot;message_handler&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script src=&amp;quot;iframe1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;window.onload = function () {
    var message_handler = document.getElementById(&amp;quot;message_handler&amp;quot;);
    var btn = document.getElementById(&amp;quot;send&amp;quot;);
    
    function sendMessage(e) {
        e.preventDefault();
        parent.window.postMessage(&amp;quot;Welcome to unixera.com&amp;quot;, &amp;quot;http://iframe1.unixera.com&amp;quot;);
    }
    
    function receiveMessage(e) {
        if (e.origin !== &amp;quot;http://container.unixera.com&amp;quot;) {
            return;
        }
        
        message_handler.innerHTML = e.data;
        
        e.source.postMessage(&amp;quot;Response from parent&amp;quot;, e.origin);
    }
    
    if (window.addEventListener) {
        btn.addEventListener(&#39;click&#39;, sendMessage, false);
        addEventListener(&#39;message&#39;, receiveMessage, false);
    } else {
        btn.attachEvent(&#39;onclick&#39;, sendMessage);
        attachEvent(&#39;onmessage&#39;, receiveMessage);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体代码查看&lt;code&gt;parent-to-child&lt;/code&gt;和&lt;code&gt;child-to-parent&lt;/code&gt;代码分支。&lt;/p&gt;

&lt;h3 id=&#34;child和child之间的通信&#34;&gt;child和child之间的通信&lt;/h3&gt;

&lt;p&gt;主体代码和上面一样，但会遇到跨域的问题——可能你也会注意到了，主window和子iframe之间不存在跨域的问题，即使不是属于同一个一级域，类似&lt;code&gt;www.a.com&lt;/code&gt;和&lt;code&gt;www.b.com&lt;/code&gt;也不会出现问题。但iframe之间的通信就会出现这个问题，在&lt;code&gt;window.postMessage&lt;/code&gt;这个方案中，可以通过设置&lt;code&gt;document.domain = &amp;quot;unixera.com&amp;quot;&lt;/code&gt;，但这个设置也有局限性，如果iframe属于不同的一级域名，就无法设置。因此这种方法只适合站内不同子域间的通信。&lt;/p&gt;

&lt;p&gt;值得注意的是，如果一个主window内存在两个同级的iframe，则三个页面都需要设置&lt;code&gt;document.domain&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;cross-frame&#34;&gt;&lt;code&gt;Cross Frame&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;这是一个通用的方法，简单来说是A iframe包含B iframe，在B iframe中调用了相关的接口，完成调用之后获取到结果，&lt;code&gt;location.href&lt;/code&gt;到和A iframe位于同一个域的C iframe，在C iframe中调用A iframe中定义的方法，将B iframe中获取的结果作为参数传到要跳转的url后，在C iframe中通过&lt;code&gt;location.search&lt;/code&gt;变量来获取变量。&lt;/p&gt;

&lt;p&gt;这个方法的基础是，在同一个域下，子iframe可以通过&lt;code&gt;parent.parent_function()&lt;/code&gt;来调用其parent中定义的方法。
&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/iframe.png&#34; alt=&#34;aba方法图示&#34; /&gt;&lt;/p&gt;

&lt;p&gt;A页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;iframe src=&amp;quot;www.b.com/b.html&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;script src=&amp;quot;a.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function a_function (arg) {
    alert(&amp;quot;I received: &amp;quot; + arg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;B页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;b.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.ajax({
    data: {
        &amp;quot;xx&amp;quot;: &amp;quot;yy&amp;quot;
    },
    url: &amp;quot;http://www.b.com/go.php&amp;quot;,
    success: function (response) {
        location.href = &amp;quot;http://www.a.com/c.html?arg=&amp;quot; + response.result;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;c.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var result = location.search.substring(1);
var arg = result.split(&amp;quot;=&amp;quot;)[1];
parent.a_function(arg);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;window-name&#34;&gt;&lt;code&gt;window.name&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;window&lt;/code&gt;对象的&lt;code&gt;name&lt;/code&gt;属性是一个很特殊的属性，在设定了&lt;code&gt;window.name&lt;/code&gt;之后，执行&lt;code&gt;location.href&lt;/code&gt;跳转，&lt;code&gt;window.name&lt;/code&gt;属性仍然不会发生变化，可以通过这种方式实现变量的传递。&lt;/p&gt;

&lt;p&gt;A页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;iframe src=&amp;quot;www.b.com/b.html&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;script src=&amp;quot;a.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function a_function (arg) {
    alert(&amp;quot;I received: &amp;quot; + arg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;B页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;b.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.ajax({
    data: {
        &amp;quot;xx&amp;quot;: &amp;quot;yy&amp;quot;
    },
    url: &amp;quot;http://www.b.com/go.php&amp;quot;,
    success: function (response) {
        window.name = response.result;
        location.href = &amp;quot;http://www.a.com/c.html&amp;quot;;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C页面：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;c.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var arg = window.name;
parent.a_function(arg);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这次先介绍这些方法，大家有什么问题或者有更好的方法可以补充。
其实写这篇总结是因为这次遇到了问题，花了好几天的时间又上网搜索，又是请教公司的前端大牛，才得到一些零碎的知识，但很明显这是不完整的，以后再遇到会继续更新。网上却找不到很完整的教程，其中的一些坑也没有人能详细的总结。故而写下这一篇具有操作性的教程，希望对读者有用。&lt;/p&gt;

&lt;p&gt;有些同学可能会疑问为什么jsonp没有提到，因为我认为它是前端和服务器端通信用到的，虽然和跨域有关，但和iframe并无关系，因此在此未涉及。同理，还有CORS。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
