<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Proxy on Me &amp; Web</title>
    <link>http://lovelock.coding.me/tags/proxy/</link>
    <description>Recent content in Proxy on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <lastBuildDate>Thu, 09 Feb 2017 14:39:09 +0800</lastBuildDate>
    <atom:link href="/tags/proxy/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>认识正向代理和反向代理</title>
      <link>http://lovelock.coding.me/linux/proxy-and-reverse-proxy/</link>
      <pubDate>Thu, 09 Feb 2017 14:39:09 +0800</pubDate>
      
      <guid>http://lovelock.coding.me/linux/proxy-and-reverse-proxy/</guid>
      <description>

&lt;p&gt;这两个概念平时经常会提到，但我自己好像对它们两个的区别也不是很明白。刚才找了&lt;a href=&#34;http://freeloda.blog.51cto.com/2033581/1288553&#34;&gt;一篇文章&lt;/a&gt;，看起来讲述的挺清楚。这里我再用自己的语言描述一下以加深印象。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一句话解释：正向代理是为了让防火墙内的用户通过墙外的代理访问原本不可访问的服务；反向代理是为了让防火墙外的用户访问墙内的服务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;正向代理&#34;&gt;正向代理&lt;/h2&gt;

&lt;p&gt;正向代理就是我们平时提到最多的『代理』，而有科学上网需求的同学可能对这个概念更熟悉。原本无法访问墙外资源的我们买或租一台位于墙外的机器，搭上代理，就可以通过代理来访问『不存在的网站』了。&lt;/p&gt;

&lt;p&gt;为了描述简单，比如我的代理服务器地址为myproxy.com，我要通过它访问twitter.com。&lt;/p&gt;

&lt;p&gt;在这个使用场景下，我在浏览器输入的地址仍是&lt;code&gt;https://twitter.com&lt;/code&gt;，因为本地配置了代理的客户端，其中配置了代理规则，当命中这个规则时，访问该地址的请求就会通过&lt;code&gt;myproxy.com&lt;/code&gt;去访问，代理服务器去目标服务器取回我想要的数据后返回给我。&lt;/p&gt;

&lt;p&gt;正如前面所说，&lt;strong&gt;客户端必须要有一定配置才能使用正向代理&lt;/strong&gt;。因为要保证本来要发往目标服务器的地址会被代理服务器『劫持』。如果我说的不够明白，自行代入一下影梭的用法，就知道我在说什么了。&lt;/p&gt;

&lt;h2 id=&#34;反向代理&#34;&gt;反向代理&lt;/h2&gt;

&lt;p&gt;正向代理我们个人使用比较多，而反向代理可能就更多的出现在工作中了。我理解有两种情况需要用到反向代理。以VPC（Virtual Private Cloud）为例，如果不太了解VPC的特点，可以简单的理解为真实提供服务的机器都位于一个对外不可见的网络环境中，要让外部客户端访问其中的资源，有两种方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;给内部机器分配外部可以访问的IP地址&lt;/li&gt;
&lt;li&gt;使用『负载均衡』技术&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中第一种也就是偶尔会听到的『绑定多网卡』，一个机器有一个内网地址和一个外网地址。内部地址用于访问内网资源，比如云主机提供商通常会有自己的『镜像源』，从外部访问时很慢或者根本不能访问，而用内网访问相当于直连，速度快到飞起。服务器说到底还是要为外部提供服务，所以它还需要一个外部地址供外部的客户端访问。&lt;/p&gt;

&lt;p&gt;这种只需要按照相应的规则配置就可以了，我也只是了解，因为我接触不到这一层。&lt;/p&gt;

&lt;p&gt;接触更多的是『负载均衡』，也叫Load-Balance，简称LB。在VPC的网络环境下，它肯定是需要有两个IP的。我本地没有VPC的环境，下面的实验基于本地的Docker环境。&lt;/p&gt;

&lt;h4 id=&#34;实验条件&#34;&gt;实验条件&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Ubuntu 16.04 with Docker 1.12.3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo docker pull nginx&lt;/code&gt;官方Nginx Docker镜像&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;实验步骤&#34;&gt;实验步骤&lt;/h4&gt;

&lt;h5 id=&#34;直接访问-通过端口转发&#34;&gt;直接访问（通过端口转发）&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;本地建一个目录，用于存放网站资源文件。如&lt;code&gt;$HOME/Public/web1/index.html&lt;/code&gt;，文件内容如下：&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;   &amp;lt;html&amp;gt;
   	&amp;lt;head&amp;gt;
   		&amp;lt;title&amp;gt;Web1&amp;lt;/title&amp;gt;
   	&amp;lt;/head&amp;gt;
   	&amp;lt;body&amp;gt;
   		&amp;lt;h1&amp;gt;Content of Web1&amp;lt;/h1&amp;gt;
   	&amp;lt;/body&amp;gt;
   &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker run --name web1 -v /home/docker/Public/web1:/usr/share/nginx/html:ro -d -p 8081:80 nginx&lt;/code&gt; 这句命令做了以下几件事：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;给docker容器指定名字web1&lt;/li&gt;
&lt;li&gt;设置一个『共享目录』，从容器中读取&lt;code&gt;/usr/share/nginx/html&lt;/code&gt;目录实际是&lt;strong&gt;以只读方式&lt;/strong&gt;读取宿主本地的&lt;code&gt;/home/docker/Public/web1&lt;/code&gt;目录。&lt;/li&gt;
&lt;li&gt;设置本地端口8081映射到容器的80端口&lt;/li&gt;
&lt;li&gt;启动Nginx容器&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我的宿主机器IP是&lt;code&gt;192.168.159.3&lt;/code&gt;，所以可以访问&lt;code&gt;http://192.168.159.3:8081&lt;/code&gt;来检查一下是否成功了&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://ww2.sinaimg.cn/large/006tKfTcly1fck90lvtwxj30uq04sq3i.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;等等，这种方式绝对是不可接受的。我虽然不用关心容器的IP，但它竟然用了这么个端口，难道还要让用户记住端口号？&lt;/p&gt;

&lt;h5 id=&#34;反向代理-1&#34;&gt;反向代理&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;配置宿主机的Nginx（类比上面提到的VPC中的LB，因为它既能被外部访问，同时也能访问容器实例）&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;   server {
   	server_name proxy.ubuntu.com;

   	location / {
   		proxy_pass http://localhost:8081;
   	}
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的配置做了以下几件事：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;给宿主机配置了一个server_name，这个在测试环境不太需要，这里配置了只是因为我的宿主机已经有了好几个vhost。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;location段指定当访问&lt;code&gt;http://proxy.ubuntu.com/&lt;/code&gt;时会将请求重定向到&lt;code&gt;http://localhost:8081&lt;/code&gt;。这里省略了&lt;code&gt;listen 80;&lt;/code&gt;主要是懒，因为本来就是默认的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过&lt;code&gt;http://proxy.ubuntu.com&lt;/code&gt;访问，配置hosts什么的不用我说了吧&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ww4.sinaimg.cn/large/006tKfTcly1fck9or3xq6j30js05qdga.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过上面的两个例子，我们已经看到了什么是反向代理和它的实际作用了。但实际上它更重要的应用是『负载均衡』。比如一个服务由2台服务器提供，假设两台服务器配置一样，再起两个容器实例吧，这次要把访问日志打出来。首先要看一下容器里默认的Nginx配置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ww4.sinaimg.cn/large/006tKfTcly1fck9uzyl4zj317u0410uu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;执行&lt;code&gt;docker cp 3bcbb1c5df2b:/etc/nginx/nginx.conf nginx.conf&lt;/code&gt;就把其中一个容器实例的&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;拷贝到本地的&lt;code&gt;./nginx.conf&lt;/code&gt;文件了。内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &#39;
                      &#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &#39;
                      &#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&#39;;

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;你也许知道Docker中的服务是不能以daemon方式运行的，那这里为什么没有&lt;code&gt;daemon off;&lt;/code&gt;的配置呢？因为它在Dockerfile的CMD段指定过了。。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看倒数第二行我们知道了具体的server配置是位于&lt;code&gt;/etc/nginx/conf.d&lt;/code&gt;中的，也就是我们俗称的vhosts配置。根据经验，它一定是包含一个&lt;code&gt;default.conf&lt;/code&gt;的，同样的方式把它拿出来:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker cp 3bcbb1c5df2b:/etc/nginx/conf.d/default.conf default.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache&#39;s document root
    # concurs with nginx&#39;s one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好，从这里我们就看到了Nginx的访问日志所在路径，稍微修改一下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
    listen       80;
    server_name  localhost;

    access_log  /var/log/nginx/log/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就确定了日志的位置。执行下面的指令:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name web5 -v /home/docker/Public/web2:/usr/share/nginx/html:ro -v /home/docker/etc/custom.conf:/etc/nginx/conf.d/default.conf -v /home/docker/etc/log/web5.log:/var/log/nginx/host.access.log -d -p 8085:80 nginx
docker run --name web6 -v /home/docker/Public/web2:/usr/share/nginx/html:ro -v /home/docker/etc/custom.conf:/etc/nginx/conf.d/default.conf -v /home/docker/etc/log/web6.log:/var/log/nginx/host.access.log -d -p 8086:80 nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就起了两个容器实例。然后在宿主机的Nginx配置的http段加入以下配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;upstream web_proxy {
		server localhost:8085;
		server localhost:8086;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在&lt;code&gt;proxy.ubuntu.com&lt;/code&gt;的vhosts中配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
	server_name proxy.ubuntu.com;

	location / {
		proxy_pass http://web_proxy;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启宿主Nginx就可以见证一个最简单的Nginx负载均衡了。&lt;/p&gt;

&lt;p&gt;打开&lt;code&gt;http://proxy.ubuntu.com/&lt;/code&gt;，每次出现的页面都是这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ww3.sinaimg.cn/large/006tKfTcly1fckby59r15j30mm04wdgb.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以多刷新几次，关注下两个log文件的变化，你会发现两个log文件总是一样的，比如这次访问web5，下次一定是web6，偶数次之后两个总是相等的。这是因为在上面upstream的设置中，没有配置weight（权重）的情况下，默认两个server的权重是一样的。&lt;/p&gt;

&lt;p&gt;关于Nginx负载均衡的具体分配策略问题，另外开一篇文章来讨论。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
