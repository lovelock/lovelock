<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>方法论 on Me &amp; Web</title>
    <link>http://lovelock.coding.me/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/</link>
    <description>Recent content in 方法论 on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <lastBuildDate>Wed, 13 Jan 2016 23:32:28 +0000</lastBuildDate>
    <atom:link href="/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>我的编程心得——第一篇章</title>
      <link>http://lovelock.coding.me/miscs/2015-11-28-my-thoughts-about-programming/</link>
      <pubDate>Wed, 13 Jan 2016 23:32:28 +0000</pubDate>
      
      <guid>http://lovelock.coding.me/miscs/2015-11-28-my-thoughts-about-programming/</guid>
      <description>

&lt;h2 id=&#34;可见性-visibility&#34;&gt;可见性 Visibility&lt;/h2&gt;

&lt;p&gt;关于变量和函数等的可见性我真是无语了。&lt;/p&gt;

&lt;p&gt;作为PHP程序员，我们知道所有PHP类都是&lt;code&gt;public&lt;/code&gt;的，也就是说一个类对其他任何类都是可见的。这其实也很好理解，Java中有私有类的概念，是因为Java的类里面还可以定义类，而这个『子类』仅仅它的『父类』可见，所以私有类就有了它存在的意义。但PHP是不能在类中定义类的，所以，如果存在私有的类，那任何别的类都访问不了它，它也就没有存在的意义了。&lt;/p&gt;

&lt;p&gt;所以这里说的可见性指变量和函数的可见性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;是的，你可以把所有的变量和方法都声明为&lt;code&gt;public&lt;/code&gt;，或者直接省略，它默认就是&lt;code&gt;public&lt;/code&gt;，通常这不会有任何问题。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于一个『注重实效』的程序员来说，这些细节是不可接受的。&lt;/p&gt;

&lt;p&gt;我的理解是，如果是写API，非接口函数一律不用&lt;code&gt;public&lt;/code&gt;。这时，会有同学说，那如果别的类要用到这个类的某些方法呢？那我只能呵呵了，你为什么会把一个可以复用给其他类的方法写在接口类里面呢？&lt;/p&gt;

&lt;p&gt;坚持三个原则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对外提供服务的，用&lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以让子类使用的，用&lt;code&gt;protected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只有自己使用的，用&lt;code&gt;private&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体到实际编码中有这些操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;接口类、工具类、数据库或缓存操作这些类中需要让外部类调用的方法用&lt;code&gt;public&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果确定某个类不会被别的类继承，那就给它一个&lt;code&gt;final&lt;/code&gt;限制吧，它的所有变量都用&lt;code&gt;private&lt;/code&gt;，如果外部要访问，就提供&lt;code&gt;accessor&lt;/code&gt;，也就是相应的&lt;code&gt;getter&lt;/code&gt;函数，当然，如果是私有的变量，应该就不需要被从外部修改了，也就不需要&lt;code&gt;setter&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果一个类被设计成其他类的基类，先要判定它的哪些变量和方法是要给它的衍生类用的，哪些是它自己用的，分别给&lt;code&gt;protected&lt;/code&gt;和&lt;code&gt;private&lt;/code&gt;，当然提供给外部的还是要&lt;code&gt;public&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;隔离变化&#34;&gt;隔离变化&lt;/h2&gt;

&lt;p&gt;这四个字简直就是软件设计的万物之源。&lt;/p&gt;

&lt;p&gt;每当提到设计模式，总会说到六大原则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;单一职责原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;里氏替换原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;依赖倒置原则&lt;/li&gt;
&lt;li&gt;&lt;em&gt;接口隔离原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;迪米特法则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;开闭原则&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看看这6大原则中有几个是和『隔离变化』有关的？&lt;/p&gt;

&lt;p&gt;这些『总纲』性质的东西离实际的编码其实还是有些距离的，但并不妨碍我践行它们。比如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编写职责单一的小方法，而不要写大方法&lt;/p&gt;

&lt;p&gt;目前我在公司维护的代码这个问题非常严重，动辄几百行上千行的方法你服不服？如果真是业务逻辑复杂，难以解耦也就算了，你知道这里面有多少行是记日志用的？少说有1/4。为什么？因为记日志没有列出单独的方法，每次记日志前先要读配置文件，指定日志要写到什么地方，然后给要记录的内容数组的每个字段赋值，最后调用封装的write_log方法记日志。这一套拳打下来至少有8行了。
还有就是要通过&lt;code&gt;echo&lt;/code&gt;把数据返回给接口调用方，每个接口最后都要有6行的&lt;code&gt;if/else&lt;/code&gt;，因为首先要判断是否数组，然后决定是否&lt;code&gt;json_encode&lt;/code&gt;，&lt;code&gt;echo&lt;/code&gt;完结果再防止Yaf模板引擎渲染还要&lt;code&gt;exit&lt;/code&gt;。何况不只是每个方法最后要这样，中间可能会因为出错而提前退出，也要再打这一套拳。想象一下这里面有多少重复代码了！
如果是我自己的项目，我肯定会考虑引入&lt;code&gt;monolog/monolog&lt;/code&gt;，让处理日志的繁杂工作都留给专业的Component去做多好？而返回值呢，我会选择&lt;code&gt;symfony/httpfoundation&lt;/code&gt;。
但是，这不是我自己的项目。所以我只好仿照&lt;code&gt;monolog/monolog&lt;/code&gt;的语法，写了个简单的工具类用来实现一行代码记日志，避免业务代码被记日志的代码淹没。然后我在接口的基类中添加了一个&lt;code&gt;sendResponse&lt;/code&gt;方法，把上面提到的一系列判断、退出都封装起来，我知道这样其实是不合理的，因为接口类不应该承担如何设置&lt;code&gt;Response&lt;/code&gt;的职责，最好的方法是也许是搞一个Service Container，优雅是优雅了，但代码量也大啊，业务需求那么多。。。。
说这么多，宗旨就是多写一些实用的小方法，不写长方法，这样就可以很放心的修改一个小方法从而起到影响全局的作用了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;面向接口而不是面向实现&lt;/p&gt;

&lt;p&gt;这一点其实还可以接着上面的谈，比如在第一版实现中，由于业务简单，我写了一个方法&lt;code&gt;composeObjectWidthAndLength&lt;/code&gt;，用来把从前端传来的长和宽放在扩展字段中，然后返回一个不带长宽字段而增加了扩展字段的数组，但后面发现需要在存储对象之前修改的东西越来越多，那么我就可以很方便的在这个函数内部做修改，然后把这个方法重命名一下。多么美好！
还有一点是让我觉得我的坚持很值得。
有一次说要替换发私信服务的接口，很显然新接口的函数签名和老的不一样，那怎么办呢？幸好我之前的发私信功能就把这个功能抽出来了，需要替换时只需要修改&lt;code&gt;adapter&lt;/code&gt;方法就可以了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;数据一致性&#34;&gt;数据一致性&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不要让一个变量在多处被修改&lt;/p&gt;

&lt;p&gt;这个问题挺难解决的。尤其是『更新』缓存数据的时候。为了性能，我们把数据存在缓存里，但缓存并没有提供给我们『更新』功能，而只能先读取，改了数据之后再写回。很显然这个操作不是原子的，但好在对单个key的读取并不频繁。即便这样也会出现先读取了某个值，然后调用某个方法，在这个方法内部又读了它的值并且修改后回写到了，方法执行完，我们以为缓存中的值还是我第一次取的，再按当前的逻辑修改，写回。好，上一次的修改就被覆盖了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;时效性&#34;&gt;时效性&lt;/h2&gt;

&lt;p&gt;这就是时间管理的问题了。我在写了一段时间代码之后，发现拿到需求以后自己再梳理一遍，最好能落实到书面上，或者写在GTD工具里（不需要太复杂的，我觉得奇妙清单这种就足够了），实施的时候对照着一项一项的完成，其实效果要比拿到需求就埋头写要高得多。&lt;/p&gt;

&lt;p&gt;联想到我刚入行的时候，我师父总是不厌其烦的跟我强调一定要弄清楚需求，不然老是做无用功。后来的职场让我深刻的体会了这个方针。&lt;/p&gt;

&lt;p&gt;还记得师父对我最严重的一次鄙视：&lt;/p&gt;

&lt;p&gt;我终于把Vim配置好了，这样效率就高多了。
师父回了一句，你有什么效率啊。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
