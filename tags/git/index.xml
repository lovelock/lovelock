<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Me &amp; Web</title>
    <link>http://lovelock.coding.me/tags/git/</link>
    <description>Recent content in Git on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <lastBuildDate>Sun, 21 Feb 2016 15:37:20 +0800</lastBuildDate>
    <atom:link href="/tags/git/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>使用Git钩子自动部署代码</title>
      <link>http://lovelock.coding.me/git/git-deploy-hook/</link>
      <pubDate>Sun, 21 Feb 2016 15:37:20 +0800</pubDate>
      
      <guid>http://lovelock.coding.me/git/git-deploy-hook/</guid>
      <description>

&lt;p&gt;前几天在&lt;a href=&#34;https://bandwagonhost.com/&#34;&gt;搬瓦工&lt;/a&gt;上买了个年费19.99刀的VPS，想着用来做一些研究，毕竟在公网上，做什么事情都更方便点。虽然机器的性能尚可，就是网络稍慢。不过好在发现速度慢时可以切换一下机房，数据也没有损失，一分钟即可搞定，这点简直是搬瓦工的杀手锏。&lt;/p&gt;

&lt;p&gt;其实是前几天我去一家公司面试，面试官跟我提到他们之前用过Laravel，发现性能像屎一样，一般框架的性能影响可以忽略不计，性能消耗可能都在数据库IO上，但Laravel不一样，性能真的消耗在了框架上。。。。这就让我萌生了一个念头，自己测试一下到底我们敬爱的鸟哥写的Yaf，和我喜欢的Symfony及其精简版Silex还有号称为艺术家而生的框架Laravel及其精简版Lumen的性能。&lt;/p&gt;

&lt;p&gt;环境部署我就不说了，直接上配置说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-21%20%E4%B8%8B%E5%8D%883.49.05.png&#34; alt=&#34;操作系统版本&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-21%20%E4%B8%8B%E5%8D%883.47.48.png&#34; alt=&#34;PHP版本&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-21%20%E4%B8%8B%E5%8D%883.48.04.png&#34; alt=&#34;PHP模块&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;git自动部署&#34;&gt;Git自动部署&lt;/h2&gt;

&lt;p&gt;由于网络连接比较慢，在服务器上直接写代码是很浪费时间的，那我就想在本地写了代码，push到远端服务器之后，给git配上一个钩子，让它自己把最新的代码覆盖到Web目录。&lt;/p&gt;

&lt;p&gt;对，就是钩子。&lt;/p&gt;

&lt;p&gt;第一次对钩子的作用有概念还是Yaf的Plugin中的钩子，&lt;del&gt;说白了就是回调函数&lt;/del&gt;。你可以指定在某个事件发生前或者发生后做某件事。&lt;/p&gt;

&lt;p&gt;那根据需求，这个钩子应该在&lt;code&gt;/var/www/project&lt;/code&gt;中执行&lt;code&gt;git checkout -f&lt;/code&gt;命令。那总不能要cd到Web目录去执行吧，所以得先设置两个变量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 要部署到的目录，在这里是`/var/www/project`
2. git的remote地址
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是具体的操作步骤。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在服务器设置git server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;useradd -m -d /var/git git -s /usr/bin/git-shell
cd /var/git
mkdir project.git
cd project.git
git init --bare
cd hooks
echo &#39;git --work-tree=/var/www/project --git-dir=/var/git/project.git checkout -f&#39; &amp;gt; post-receive
chmod +x post-receive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;clone 代码库到本地，开始工作&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@remoteserver:/var/git/project.git
cd project.git
touch a.test
git add .
git commit -m &#39;test git hook&#39;
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在服务器检查Web目录&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /var/www/project
ls -l
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个过程需要注意&lt;strong&gt;用户git需要有Web目录的写权限&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;基础搭好了，就可以继续了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git取消证书校验</title>
      <link>http://lovelock.coding.me/git/2015-06-08-gitqu-xiao-zheng-shu-xiao-yan/</link>
      <pubDate>Mon, 08 Jun 2015 12:32:44 +0800</pubDate>
      
      <guid>http://lovelock.coding.me/git/2015-06-08-gitqu-xiao-zheng-shu-xiao-yan/</guid>
      <description>&lt;p&gt;在一些较老版本的Linux服务器上如果用Git的话可能会出现证书错误的问题，这是因为Curl自带的证书版本较老。但好像要更新证书bundle挺麻烦，刚刚看到一个很简单的解决方案，直接取消git的证书校验。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global http.sslVerify false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一切变得美好起来了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>github学习记录</title>
      <link>http://lovelock.coding.me/git/2015-04-29-githubxue-xi-ji-lu/</link>
      <pubDate>Wed, 29 Apr 2015 00:31:18 +0800</pubDate>
      
      <guid>http://lovelock.coding.me/git/2015-04-29-githubxue-xi-ji-lu/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;这是我自己总结的一些比较容易迷惑的地方，更详细的教程推荐&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&#34;&gt;廖雪峰的git教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;remote到底是什么&#34;&gt;remote到底是什么？&lt;/h2&gt;

&lt;p&gt;首先要知道remote的意思是什么。remote显然是相对local而言的，那么你在local可以干什么呢？可以创建或删除分支，所以你在remote也可以进行同样的操作，那么其实remote的意思就是存在于服务器上的代码库喽。而对于github而言，它默认的名字是origin，所以最好也不要改了，因为一看到origin就知道是服务端的代码库了。&lt;/p&gt;

&lt;p&gt;所以，当你想要在本地进行开发时就有了两种选择，在github的页面上建好一个repo之后：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把目录记好，clone开本地再继续&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在本地执行命令，直接在&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add origin git@github.com:lovelock/hackvim.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;多个remote&#34;&gt;多个remote&lt;/h2&gt;

&lt;p&gt;我们都爱github,但国内的环境实在是太慢了，所以平时也可以用国内的平台，像coding.net，oschina等。这样，让一个工作目录可以同时被提交到多个远程目录。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote set-url --add origin git@coding.net:lovelock/hackvim.git # 增加remote
git remote set-url --delete origin git@coding.net:lovelock/hackvim.git 删除指定remote
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是上面两个命令有条件，如果现在本地代码仓库只有一个remote了，就不能再删除remote了。&lt;/p&gt;

&lt;h2 id=&#34;tag&#34;&gt;tag&lt;/h2&gt;

&lt;p&gt;每次提交虽然都会写上提交message，但这仍然替代不了版本号。git的版本号不像svn那样是一个数字，而是一个hash，人眼当然不能看到它的高低的，所以手动指定一个版本号就变得必要了。这个功能可以使用&lt;code&gt;git tag -a v0.1 -m &#39;version 0.1&#39;&lt;/code&gt;这样的命令来操作，注意这里的&lt;code&gt;-a&lt;/code&gt;选项，它不是必选项，但很重要。因为如果忽略了这个选项，新建的标记就仅仅是一个标记，标记就是这次提交的一个代称。而如果加了&lt;code&gt;-a&lt;/code&gt;选项，创建的就是一个标签对象，并且需要一个标签消息，
当执行这个命令后，就在git对象库中添加了一个新的对象，并且标签引用指向了一个标签对象而不是指向一个提交。&lt;/p&gt;

&lt;h2 id=&#34;分支&#34;&gt;分支&lt;/h2&gt;

&lt;p&gt;现在我遇到的问题是我创建了一个&lt;a href=&#34;https://github.com/lovelock/hackvim.git&#34;&gt;vim的配置文件&lt;/a&gt;，在我本地的ArchLinux上用的是风生水起，那叫一个爽，可是在公司用的服务器上就没有那么爽了，因为很多环境不是我可以决定换的，有些插件用不了，但主要的配置还是想和主版本保持一致，怎么办呢？&lt;/p&gt;

&lt;p&gt;新建一个分支。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git branch server
git checkout server

# 做一些适应server的修改

git add .
git commit -m &#39;add server branch&#39;
git push origin server:server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果有一天我不想要这个server分支了，那么可以用同样的方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin :server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就把远程的分支删除了。其实这是一种不准确的说法，看这个命令就知道了，它并不是真正的删除命令，而是把一个空分支推到了remote的server分支，所以实际上server分支就被删除了。&lt;/p&gt;

&lt;p&gt;这样就在push的同时在远端也新建了server分支。&lt;/p&gt;

&lt;h2 id=&#34;取消提交的文件&#34;&gt;取消提交的文件&lt;/h2&gt;

&lt;p&gt;可能会出现这样的情形，比如我创建了一个PHP的项目，用了composer，在本地安装了很多依赖，然后我就直接添加所有文件，然后提交了，这样代码仓库就会变得很大，而且存了很多没有用的东西，大家都知道可以加个.gitignore文件来避免，那现在我已经提交了，再添加这个文件也没有用了。当然git不会那么傻，这都是可以解决滴&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm -r --cached vendor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再提交，push，再看remote，是不是已经没有那些文件了？&lt;/p&gt;

&lt;p&gt;上面虽然写了那么多，其实我并没有在生产环境也就是公司环境用过Git，到了新公司我所掌握的这些知识就捉襟见肘了。还是另开一篇写这些话题吧，算是这篇的进阶。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
