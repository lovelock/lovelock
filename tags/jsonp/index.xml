<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Me &amp; Web</title>
    <link>http://lovelock.coding.me/tags/jsonp/index.xml</link>
    <description>Recent content on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>frostwong@gmail.com (Frost Wong)</managingEditor>
    <webMaster>frostwong@gmail.com (Frost Wong)</webMaster>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <atom:link href="/tags/jsonp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>jsonp原理全解析</title>
      <link>http://lovelock.coding.me/javascript/2015-08-11-jsonp%E5%8E%9F%E7%90%86%E5%85%A8%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 11 Aug 2015 23:40:32 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/javascript/2015-08-11-jsonp%E5%8E%9F%E7%90%86%E5%85%A8%E8%A7%A3%E6%9E%90/</guid>
      <description>

&lt;p&gt;昨天写了一篇关于iframe间跨域通讯问题的总结，想着既然提到了jsonp这个长久以来曽令我困惑的技术，就再总结一篇吧。&lt;/p&gt;

&lt;p&gt;主要参考了&lt;a href=&#34;http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html&#34;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;

&lt;p&gt;jsonp是为了解决跨域请求而产生的技术，这里的跨域并不是iframe之间通讯的那种，后者是禁止了一个域的js操作位于另一个域的资源，往往是为了在iframe之间传递变量，而jsonp则是为了解决跨域请求接口。但说到底，还是同源策略引起的。&lt;/p&gt;

&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;

&lt;p&gt;jsonp的出现是优秀的工程师智慧的结晶。可能是受到“所有带src属性的标签都可以跨域访问资源”这个事实的启发。设想一下，诸如&lt;code&gt;&amp;lt;script&amp;gt;/&amp;lt;img&amp;gt;/&amp;lt;iframe&lt;/code&gt;这些标签，它们请求后返回的是脚本或者图片或者页面，那么能不能返回一个函数调用呢？当然能。&lt;/p&gt;

&lt;p&gt;如，在本地的页面上定义一个函数&lt;code&gt;function_example&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
    function function_example() {
        alert(&amp;quot;我是本地定义的函数&amp;quot;);
    }
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://remotehost.com/remote.js&amp;quot;/&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;《JavaScript高级程序设计》第一章提到了脚本加载是按照顺序执行的，也就是说在加载remote.js时，前面定义&lt;code&gt;function_example&lt;/code&gt;的脚本已经加载了，即该函数已经定义了。那么如果在remote.js中调用该函数，会出现什么情况呢？当然函数就被执行了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function_example();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面就是jsonp实现的基础原理。&lt;/p&gt;

&lt;h2 id=&#34;实践&#34;&gt;实践&lt;/h2&gt;

&lt;p&gt;那么具体到使用应该怎么操作呢？
不要看到在第一个例子中引入了remote.js文件就误以为我们真的是要引入js文件了，要记得我们的目的是请求服务接口，所以，服务端应该返回类似&lt;code&gt;function_example()&lt;/code&gt;这样的形式才可以，也即需要返回一个由函数名包含的结果，括号中才是真正的结果，那么结果当然要用JavaScript原生支持的json格式才完美了。所以我们看到的jsonp的返回值多数形如&lt;code&gt;callback({&amp;quot;aa&amp;quot;: &amp;quot;bb&amp;quot;, &amp;quot;cc&amp;quot;: &amp;quot;dd&amp;quot;})&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;前端&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
    function handler(result) {
        alert(result.login);
    }
    
    var url = &amp;quot;http://remotehost.com/index.php?name=frost&amp;amp;pass=123&amp;amp;callback=handler&amp;quot;;
    var script = document.createElement(&amp;quot;script&amp;quot;);
    script.setAttribute(&amp;quot;src&amp;quot;, url);
    document.getElementsByTagName(&amp;quot;head&amp;quot;)[0].appendChild(script);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那服务端应该怎么处理呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

$name = $_GET[&#39;name&#39;];
$pass = $_GET[&#39;pass&#39;];
$callback = $_GET[&#39;callback&#39;];
// do something

$result = [
    &amp;quot;login&amp;quot;: &amp;quot;true&amp;quot;,
    &amp;quot;other&amp;quot;: &amp;quot;foobar&amp;quot;
];

echo json_encode($result);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码能完成要求吗？显然不能，因为它返回的是一个json对象，而不是能够执行的js指令。
因此，最后一句应该写成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;echo $callback . &#39;(&#39; . $result . &#39;)&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就完整了。&lt;/p&gt;

&lt;p&gt;这还引出了另外一个安全问题，既然请求可以返回函数调用的代码片段，那么也可以返回任意的代码片段，如果直接&lt;code&gt;eval&lt;/code&gt;执行返回的代码片段就会带来安全隐患，因为你不知道服务器返回的是什么样的调用。&lt;/p&gt;

&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;

&lt;p&gt;实际使用中就像AJAX一样，虽然用原生的方法也可以写，但毕竟不那么方便，最流行的当然是jQuery了，提供了方便的jsonp支持，就像发送普通的ajax请求一样。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.ajax({
    data: params,
    url: url,
    dataType: &amp;quot;jsonp&amp;quot;,
    jsonp: &amp;quot;callback&amp;quot;,
    jsonpCallback: &amp;quot;function_name&amp;quot;,
    success: function (response) {
        alert(response.result);
    },
    error: function () {
        // other handle
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;事实上我们不用关心回调函数的名称，因为不管是什么，只要能传递到服务端，两端保持一致就可以保证正常执行。因此，在上面的请求中&lt;code&gt;jsonp/jsonpCallback&lt;/code&gt;参数不是必需的。&lt;/p&gt;

&lt;h2 id=&#34;完整示例&#34;&gt;完整示例&lt;/h2&gt;

&lt;p&gt;看完上面的代码片段有同学可能要问了，那如果客户端不用jsonp的方式调用服务呢？这样返回的结果岂不是错了。对，所以还要做一下适配，就像我们通常会给PHP的超全局变量封装一层获取参数的方法一样，也会给返回前对结果处理的方法做一些统一。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;
echo preResult(json_encode($result));

function preResult($encodedResult) {
    $callback = $_GET[&#39;callback&#39;];
    $postResult = $callback ? $callback . &amp;quot;(&amp;quot; . $result . &amp;quot;)&amp;quot; : $result;
    
    return $postResult;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，上面的代码片段没有做必要的条件判断和异常捕获等操作，生产环境代码中要视具体情况而定。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
