<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Me &amp; Web</title>
    <link>http://lovelock.coding.me/blog/</link>
    <description>Recent content in Blogs on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <lastBuildDate>Sat, 26 Sep 2015 21:17:35 +0000</lastBuildDate>
    <atom:link href="/blog/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>终于下决心把博客空间迁移到国内了</title>
      <link>http://lovelock.coding.me/blog/2015-09-26-%E7%BB%88%E4%BA%8E%E4%B8%8B%E5%86%B3%E5%BF%83%E6%8A%8A%E5%8D%9A%E5%AE%A2%E7%A9%BA%E9%97%B4%E8%BF%81%E7%A7%BB%E5%88%B0%E5%9B%BD%E5%86%85%E4%BA%86/</link>
      <pubDate>Sat, 26 Sep 2015 21:17:35 +0000</pubDate>
      
      <guid>http://lovelock.coding.me/blog/2015-09-26-%E7%BB%88%E4%BA%8E%E4%B8%8B%E5%86%B3%E5%BF%83%E6%8A%8A%E5%8D%9A%E5%AE%A2%E7%A9%BA%E9%97%B4%E8%BF%81%E7%A7%BB%E5%88%B0%E5%9B%BD%E5%86%85%E4%BA%86/</guid>
      <description>&lt;p&gt;写博客也有一段时间了，但产出并不是很多，最重要的是没有读者。
因为百度是无法爬到&lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;的内容的，因此用GitHub Pages搭建的博客网站往往是不能在百度里面搜到的，但我写的又是中文的文章，所以。。。。
当然其实最主要的原因是文章的质量不高。
看到&lt;a href=&#34;https://gitcafe.com&#34;&gt;GitCafe&lt;/a&gt;的网站感觉很不错，几乎提供了GitHub提供的所有功能，最重要的是国内的访问速度快，于是干脆就迁移到国内了，同时把disqus迁移到多说——说是迁移，其实完全没有负担——因为并没有历史评论，哈哈。&lt;/p&gt;

&lt;p&gt;接下来还会写很多东西，希望我写的东西能给需要的人一些帮助吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>静态博客工具使用体验</title>
      <link>http://lovelock.coding.me/blog/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Fri, 03 Jul 2015 15:04:01 +0000</pubDate>
      
      <guid>http://lovelock.coding.me/blog/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid>
      <description>&lt;p&gt;我这体验了两个博客工具之后发现，果然这种技术不是很复杂的东西还是后来者更有优势。&lt;/p&gt;

&lt;p&gt;首先接触的是Octopress，但随着写的东西越来越多（其实也没有多少了），每次generate的时间越来越长，甚至要几分钟了，导致我很不愿意用它了。经常听说Ruby很慢，但没想到在本地处理个文本还那么慢，这个时候我已经萌生了放弃它转而使用其他工具的想法。&lt;/p&gt;

&lt;p&gt;于是我发现了Hexo，这是个基于Node.js的工具，想想V8带来的性能提升就知道这个一定是Blading Speed的东西了。果不其然，把原来所有的文章导入到hexo里，几秒钟的时间就生成好了静态页面，每次修改时只生成改动的文件，这就使其效率更进一步的提升了。&lt;/p&gt;

&lt;p&gt;有些人可能会说，先发的工具会有一定的积淀啊。&lt;/p&gt;

&lt;p&gt;此话不假，但有时候作者的想法跑偏了就不知道未来的方向在哪里了。本来Octopress用rake作为命令行工具，我觉得还好吧，不算长，结果不知道作者怎么想的（我知道他写了一篇文章用来介绍2.0到3.0的转变），但我还是觉得它的方向偏了。&lt;/p&gt;

&lt;p&gt;就其本质而言，并没有多大的变化，反而是命令变的又臭又长，这可以算作历史遗留问题，但这个负担其实不应该用户来承担，是的，我们可以设置几个alias来更简单的执行这些命令，但如果真像所有这些静态页面生成工具的作者说的，用户不需要任何编程技术，那么为什么还要我们输入那么长的命令呢？&lt;/p&gt;

&lt;p&gt;相反，hexo的使用就简单明了。而且，为了对用户更友好，甚至给了简写的命令，让我一下子就记住了。&lt;/p&gt;

&lt;p&gt;g - generate
s - server
d - deploy&lt;/p&gt;

&lt;p&gt;还有比这更惬意的吗？想象一下，当你写了很多文章，只需要执行一个&lt;code&gt;hexo g&lt;/code&gt;眨眼间就生成了整个文章，真是令人激动啊。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>octopress原理浅析</title>
      <link>http://lovelock.coding.me/blog/2015-04-25-octopressyuan-li-qian-xi/</link>
      <pubDate>Sat, 25 Apr 2015 21:35:12 +0800</pubDate>
      
      <guid>http://lovelock.coding.me/blog/2015-04-25-octopressyuan-li-qian-xi/</guid>
      <description>&lt;p&gt;在学习的过程中，总想把一些心得记录下来，也就想到写博客，首先想到的就是WordPress了，
虽然也尝试了多个不同的云主机，但总是觉得用起来不够爽，程序员嘛，总归要像写代码一样
写文章才够感觉，然后就找到了github pages。也就是这个github pages让我是又爱又恨，就
是整不明白这个原理。&lt;/p&gt;

&lt;p&gt;而且，github pages目的是为项目写文档，而不是持续的写博客，octopress是在这个基础
功能上添加了一系列工具链，这就让我更迷糊了，octopress的文档看了很多次，总是觉得
糊里糊涂的，不知道怎么操作，终于让我找到了&lt;a href=&#34;http://shengmingzhiqing.com/blog/octopress-tutorials-toc.html/&#34;&gt;生命之氢 octopress教程目录&lt;/a&gt;，
感觉就像醍醐灌顶，像昨天明白了&lt;a href=&#34;http://unixera.com/blog/20150425/phpdan-ru-kou-mo-shi.html&#34;&gt;PHP单入口模式&lt;/a&gt;
一样，忍不住把这个理解过程记下来。废话有点多，言归正传。&lt;/p&gt;

&lt;p&gt;首先要搞明白的有两点&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不需要按照&lt;a href=&#34;https://github.com&#34;&gt;github&lt;/a&gt; 官网的gh-pages教程进行那些操作。&lt;/li&gt;
&lt;li&gt;不需要把新建的仓库clone到本地，所有的操作都是在octpress的目录中进行的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;几乎每篇关于octopress这种类似的工具的教程里面总会提到github 官网的github pages
教程，我觉得这就是把人搞晕的罪魁祸首。&lt;/p&gt;

&lt;p&gt;因为你根本&lt;strong&gt;不需要&lt;/strong&gt;像按那篇教程一样进行到创建目录之后的步骤，相反，如果你做了，出现的错误
反倒会让人不知所措，提示你代码库中的代码比当前要提交的新，需要先pull下来，问题是你根本
没有本地代码，又何谓的更新呢？&lt;/p&gt;

&lt;p&gt;下面是整个过程的梳理。
{% img /images/octopress.png %}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把octopress 的代码clone到本地，然后执行下面两条命令&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gem install bundler&lt;/code&gt; 安装bundler, 也就是用来安装gem的工具&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bundle install&lt;/code&gt; 安装需要的依赖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake install&lt;/code&gt; 这个很有意思，rake = ruby make，所以这个命令的意义就像make install 一样把
所需而文件拷贝到对应的目录，而在现在这个场景下，就是安装默认的主题。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;经过第一步的操作，现在写博客所需要的工具已经备齐了，就差一个远端存储它的仓库和文章的内容了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这一步才需要在github新建一个代码仓库，这个仓库的名字必须是固定的格式，&lt;code&gt;git@github.com:username/username.github.io&lt;/code&gt;，
或者&lt;code&gt;https://github.com/username/username.github.io&lt;/code&gt;，这两种格式分别是使用ssh协议和https协议，
具体区别可以参考github上的介绍文章。个人喜好是使用ssh协议，虽然github不建议使用这种方式，因为
每次提交代码时不需要输入密码，但这样更方便不是吗。需要注意的一点是这时也不要在新建的仓库种
添加README.md文件，否则又要出现前面所说的代码新旧的问题了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这时才要到&lt;code&gt;octopress&lt;/code&gt; 的目录中去执行各种命令了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这时你可能还是像我一样有疑问，&lt;code&gt;octopress&lt;/code&gt;的作用到底是什么呢？&lt;/p&gt;

&lt;p&gt;答案是：把你写的md文件（可以理解成源文件，位于source目录）编译成html文件（可以理解成目标文件，位于_deploy目录），
然后把你的编译得到的文件&lt;code&gt;commit+push&lt;/code&gt;到你的&lt;code&gt;username.github.io&lt;/code&gt;仓库的&lt;code&gt;master&lt;/code&gt;分支，也就是说你的
源文件没有被提交，所以这时需要
    - &lt;code&gt;git add .&lt;/code&gt; 将octopress 目录中位于&lt;code&gt;source&lt;/code&gt; 目录下的文件添加到你的&lt;code&gt;username.github.io&lt;/code&gt;的仓库的版本库中
    - &lt;code&gt;git commit -m &#39;init source&#39;&lt;/code&gt; 提交上述文件
    - &lt;code&gt;git push origin source&lt;/code&gt; 把文件&lt;code&gt;push&lt;/code&gt;到仓库的&lt;code&gt;source&lt;/code&gt; 分支中。&lt;/p&gt;

&lt;p&gt;现在问题就一切都了然了，&lt;code&gt;rake generate&lt;/code&gt;命令把你写的md文件编译成html，&lt;code&gt;rake deploy&lt;/code&gt;把生成的html提交到master分支，
然后你需要做的就是把source提交到source分支了。&lt;/p&gt;

&lt;p&gt;&amp;ndash; source 分支存储的是文章的md文件，而master分支存储的是编译后的文件。&lt;/p&gt;

&lt;p&gt;说的可能有点罗嗦，但我认为这样是最不容易引起歧义的，我在学习的过程中不明白的地方都着重说了，也可能是
我自己的思维习惯和常人有所不同，有些东西感觉不太容易理解，但总之这下我能开心的写东西了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
