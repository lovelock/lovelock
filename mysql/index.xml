<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysqls on Me &amp; Web</title>
    <link>http://lovelock.coding.me/mysql/index.xml</link>
    <description>Recent content in Mysqls on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <lastBuildDate>Sat, 17 Oct 2015 16:59:58 +0000</lastBuildDate>
    <atom:link href="/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MySQL真·UTF8后遇到的问题</title>
      <link>http://lovelock.coding.me/mysql/2015-10-17-MySQL%E7%9C%9F%C2%B7UTF8%E5%90%8E%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 17 Oct 2015 16:59:58 +0000</pubDate>
      
      <guid>http://lovelock.coding.me/mysql/2015-10-17-MySQL%E7%9C%9F%C2%B7UTF8%E5%90%8E%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;昨天写了一篇MySQL/MariaDB将字符集从utf8迁移到utf8mb4的总结，今天继续我的最佳实践，想到在设计数据库时要考虑到用户的email是不能重复的，所以想给它加上一个&lt;code&gt;UNI&lt;/code&gt;标记，然后遇到了这样一个问题：
&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/b_Screen%20Shot%202015-10-17%20at%205.03.08%20PM.png&#34; alt=&#34;MySQL设计UNI报错&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我当然不能放过这个学习的机会，猜想就是因为昨天的修改引起的。于是找到了&lt;a href=&#34;http://stackoverflow.com/questions/1814532/1071-specified-key-was-too-long-max-key-length-is-767-bytes&#34;&gt;这篇问答&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;MyISAM引擎默认的key的长度是1000 Bytes，而InnoDB引擎相应的是767 Bytes，那么问题来了。当我把&lt;code&gt;email&lt;/code&gt;字段设置为&lt;code&gt;varchar(255)&lt;/code&gt;时，它的最大长度是255个字符，这意味着什么呢？昨天已经说过，utf8mb4引擎对应一个字符长度是4，那么就是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;255 x 4 = 1020 &amp;gt; 767
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另一方面，utf8时，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;255 * 3 = 765 &amp;lt; 767
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完美！&lt;/p&gt;

&lt;p&gt;现在你知道为什么你公司数据里相当相当多的字符串的字段都是&lt;code&gt;varchar(255)&lt;/code&gt;了吧，因为即使用utf8，使用&lt;code&gt;varchar(256)&lt;/code&gt;的字段在作为索引时也会出错。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL迁移到真·UTF8全过程</title>
      <link>http://lovelock.coding.me/mysql/2015-10-17-MySQL%E8%BF%81%E7%A7%BB%E5%88%B0%E7%9C%9F%C2%B7UTF8%E5%85%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sat, 17 Oct 2015 01:06:29 +0000</pubDate>
      
      <guid>http://lovelock.coding.me/mysql/2015-10-17-MySQL%E8%BF%81%E7%A7%BB%E5%88%B0%E7%9C%9F%C2%B7UTF8%E5%85%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>

&lt;h1 id=&#34;为什么要做&#34;&gt;为什么要做？&lt;/h1&gt;

&lt;p&gt;写这篇总结的起因是我觉得应该深入的学习一下PHP了，结果找到了&lt;a href=&#34;http://phpbestpractices.justjavac.com&#34;&gt;PHP最佳实践中文版&lt;/a&gt;，其中关于PHP和UTF8一节引起了我的兴趣。我之前还一直以为我们的数据库用的是完整的UTF8，看完之后我惊呆了。&lt;/p&gt;

&lt;p&gt;原来我们的以为的utf8并不是真正意义上的UTF-8，或者说不是完整的，因为它只包含了&lt;a href=&#34;https://mariadb.com/kb/en/mariadb/unicode/&#34;&gt;不大于3个8位字节组成的字符&lt;/a&gt;，而4个字节组成的字符则未能包含，如𝌆、💩等常用字符。&lt;/p&gt;

&lt;p&gt;随着现在网络用语的发达，越来越多的表情符号层出不穷，真是为这种符号的存储发愁啊，所以保险起见，以后接触到的项目中，如果我的意见可以被接受，那么我将遵守这个规则——使用utf8mb4而不是utf8。&lt;/p&gt;

&lt;p&gt;那如果已经使用了utf8了，怎么更新呢？下面是操作步骤。&lt;/p&gt;

&lt;h2 id=&#34;备份&#34;&gt;备份&lt;/h2&gt;

&lt;p&gt;对数据库的修改操作毕竟是危险的，如果你的数据很重要，最好还是备份一下数据库。&lt;/p&gt;

&lt;h2 id=&#34;升级mysql服务器&#34;&gt;升级MySQL服务器&lt;/h2&gt;

&lt;p&gt;utf8mb4是从MySQL5.5.3版本引入的（对应相同版本的MariaDB)，因此如果想使用utf8mb4，至少应升级到5.5.3版本。&lt;/p&gt;

&lt;h2 id=&#34;修改数据库-数据表和列&#34;&gt;修改数据库、数据表和列&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;# 每个数据库
ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;
# 每张数据表
ALTER TABLE table_name CONVERT TO CHARACTER SET utf8 COLLATE utf8mb4_unicode_ci;
# 每列数据
ALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意，不要直接复制粘贴上面的代码，根据实际的数据进行操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;检查列和索引键的长度&#34;&gt;检查列和索引键的长度&lt;/h2&gt;

&lt;p&gt;这一步很不容易想到，当我们从utf8更新到utf8mb4时，字节的长度并没有发生变化，但字符长度却变化了。
&lt;code&gt;TINYTEXT&lt;/code&gt;类型可以容纳255个字节，在utf8编码时，可以包含255/3=85个unicode字符，而在utf8mb4时，只可以包含255/4=63.75=63个字符。因此，当这个字段的长度有可能超过63个字符时，就需要把&lt;code&gt;TINYTEXT&lt;/code&gt;修改成&lt;code&gt;TEXT&lt;/code&gt;从而容纳更多的字符。&lt;/p&gt;

&lt;h2 id=&#34;修改连接-客户端-服务端字符集&#34;&gt;修改连接、客户端、服务端字符集&lt;/h2&gt;

&lt;p&gt;这一步就是修改my.conf（在不同的操作系统中有不同的命名）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[client]
default-character-set = utf8mb4

[mysql]
default-character-set = utf8mb4

[mysqld]
character-set-client-handshake = FALSE
character-set-server = utf8mb4
collation-server = utf8mb4-unicode-ci
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时就可以查看更新的结果了
&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/b_Screen%20Shot%202015-10-17%20at%201.43.38%20AM.png&#34; alt=&#34;更新结果&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;修复和优化所有表&#34;&gt;修复和优化所有表&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;PREPARE TABLE table_name;
OPTIMIZE TABLE table_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不执行这两步可能出现数据无法更新的情况。好在用一条指令就能修复和优化所有数据库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysqlcheck -uroot -p --auto-repaire --optimize --all-databases
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会弹出密码输入提示，然后对所有数据库执行修复和优化操作。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
