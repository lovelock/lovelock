<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Me &amp; Web</title>
    <link>http://lovelock.coding.me/categories/miscs/index.xml</link>
    <description>Recent content on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>frostwong@gmail.com (Frost Wong)</managingEditor>
    <webMaster>frostwong@gmail.com (Frost Wong)</webMaster>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <atom:link href="/categories/miscs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>谈谈转基因食物</title>
      <link>http://lovelock.coding.me/miscs/talk-about-transgene-foods/</link>
      <pubDate>Sun, 17 Jul 2016 22:53:33 +0800</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/talk-about-transgene-foods/</guid>
      <description>&lt;p&gt;这件事情其实我没有怎么关注过，到超市去买油什么的也是全凭一时冲动，没有固定的品牌和品种。&lt;/p&gt;

&lt;p&gt;因为我是生物专业毕业的，知道的人难免会让我谈谈关于转基因食物的看法，因为我并不了解社会上对这件事的主流看法是怎样的，所以在谈这个问题时往往不太敢太明显的表达自己的观点，而会模棱两可的说我认为转基因是无害的，而具体是否是这样，还需要科学家们去证实。&lt;/p&gt;

&lt;p&gt;我觉得任何一个学过高中生物课的人都应该能明白这个道理。我们吃的食物在体内是经过消化和分解过程的。最终吸收到体内的不过是一个个的生物大分子片段，这些片段包括氨基酸，也就是蛋白质的组成结构，当然也有（脱氧）核糖核酸，注意，我说的是片段，因为它们也仅仅是片段，它们的作用是为我们提供营养物质，而不是改变我们身体的性状。&lt;/p&gt;

&lt;p&gt;之所以很多人一提到转基因就害怕，可能是社会上某些公知人士的大肆渲染，毕竟因为自己不懂，对那些认为自己很懂又很愿意宣传，同时很有影响力的人当然大多数人会选择深信不疑。这种盲从很可怕。&lt;/p&gt;

&lt;p&gt;看过我文章的读者可能知道我喜欢用最贴近生活的例子来阐述一件事情。那对于转基因这件事，我还是有个例子可以说。&lt;/p&gt;

&lt;p&gt;转基因可以分为自然转基因和人工转基因。大多数人害怕的其实是『人工转基因』。想理解人工转基因，那就得先知道什么是自然转基因。其实自然转基因在生活中处处可见，比如你家的小狗狗生了一群小小狗狗，小小狗狗的爸爸妈妈都是黑色的，但有可能这群小小狗狗里有一只身上出现了白色的斑点，这就有可能是基因突变引起的。我说有可能是因为关于狗的遗传特性我并没有具体研究，不知道毛色是显性还是隐形性状。咱们单说这个毛色的突变，从基因的层面上说就是有可能小小狗狗的某一条染色体上的F变成了F1,然后它翻译、转码生成的蛋白质就变成了白色。当这只小小狗狗再生小宝宝时，这种白色的性状就有可能保留了下来。假设，在这只小狗之前世界上没有带白色斑点的狗，那么严格的说，我们甚至可以说基因突变『产生』了一种新的性状。&lt;/p&gt;

&lt;p&gt;其实，基因突变就是一种自然转基因的类型。我说它是一种类型，那肯定就还有别的类型，那就是杂交了。别以为只有在人类的干预下才会有杂交的出现，其实自然界中这种现象相当普遍。一般来说生物之间是有自然隔离的，但大自然就是这么神奇，万一两种生物的染色体条数一样多，再加上其他因素也匹配，那么两种生物就有可能杂交而产生一种新的物种。当然我印象中的杂交产物就是骡子了，但骡子是没有繁殖能力的，并不能算是新的物种。&lt;/p&gt;

&lt;p&gt;那对应基因突变和杂交，人工转基因究竟干了什么呢？&lt;/p&gt;

&lt;p&gt;对狭义的转基因（排除杂交）而言，转基因就是把一个物种的DNA上某些片段重新编码成新的序列，从而产生新的性状。（这不是教科书上的定义，可能并不准确，只是我的理解）而产生这种重新编码的方法也有多种，有可能是从其他物种的DNA上截取一截粘贴上去，也可能是直接人工重新排序一段编码，还有最初的用宇宙射线什么的引发基因突变等等，当年学的什么密码子啥玩意儿的都忘得差不多了，只需要知道这些技术现在已经工业化了就对了，根本不是问题。&lt;/p&gt;

&lt;p&gt;想想有点可笑，外面都说我们中国人什么都吃，但到了转基因这里却变得异常谨慎了。&lt;/p&gt;

&lt;p&gt;那么，我就想问了，黑色狗是狗，带斑点的狗还是狗吗？『正常』的大豆是大豆，转基因的大豆就不是大豆了？你吃的转基因豆油大部分只是脂肪而已，到了肚子里是还要经过消化的，它只不过变成了我们需要的各种氨基酸等，并没有让我们的基因重排，并不会改变我们的性状。&lt;/p&gt;

&lt;p&gt;今天还看到微博上自称『央视新闻』的媒体说某些主要成分是『氯化钠』的假冒食盐已经流向市场，长期食用氯化钠可引起头晕等等症状，说的头头是道，我看了好多遍到底说的是不是氯化钠，最后确定还真是，而且这个微博账号确实是官方的。这么说那还不如说『某某生成的劣质水，主要成分是一氧化二氢，大量食用会引起膀胱胀痛』。&lt;/p&gt;

&lt;p&gt;如果你觉得民智没有开启，那么就请尽自己的一份力量多解释一下；如果他们不愿意听，你可以解释给下一个人听，没有必要变得像他们一样，网络上全是乌烟瘴气的对骂，没有意义，而且会让自己显得和他们一样，只是喷子，更没有人愿意听你的真相了。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>我的编程心得——第一篇章</title>
      <link>http://lovelock.coding.me/miscs/2015-11-28-my-thoughts-about-programming/</link>
      <pubDate>Wed, 13 Jan 2016 23:32:28 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/2015-11-28-my-thoughts-about-programming/</guid>
      <description>

&lt;h2 id=&#34;可见性-visibility&#34;&gt;可见性 Visibility&lt;/h2&gt;

&lt;p&gt;关于变量和函数等的可见性我真是无语了。&lt;/p&gt;

&lt;p&gt;作为PHP程序员，我们知道所有PHP类都是&lt;code&gt;public&lt;/code&gt;的，也就是说一个类对其他任何类都是可见的。这其实也很好理解，Java中有私有类的概念，是因为Java的类里面还可以定义类，而这个『子类』仅仅它的『父类』可见，所以私有类就有了它存在的意义。但PHP是不能在类中定义类的，所以，如果存在私有的类，那任何别的类都访问不了它，它也就没有存在的意义了。&lt;/p&gt;

&lt;p&gt;所以这里说的可见性指变量和函数的可见性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;是的，你可以把所有的变量和方法都声明为&lt;code&gt;public&lt;/code&gt;，或者直接省略，它默认就是&lt;code&gt;public&lt;/code&gt;，通常这不会有任何问题。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于一个『注重实效』的程序员来说，这些细节是不可接受的。&lt;/p&gt;

&lt;p&gt;我的理解是，如果是写API，非接口函数一律不用&lt;code&gt;public&lt;/code&gt;。这时，会有同学说，那如果别的类要用到这个类的某些方法呢？那我只能呵呵了，你为什么会把一个可以复用给其他类的方法写在接口类里面呢？&lt;/p&gt;

&lt;p&gt;坚持三个原则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对外提供服务的，用&lt;code&gt;public&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以让子类使用的，用&lt;code&gt;protected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只有自己使用的，用&lt;code&gt;private&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体到实际编码中有这些操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;接口类、工具类、数据库或缓存操作这些类中需要让外部类调用的方法用&lt;code&gt;public&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果确定某个类不会被别的类继承，那就给它一个&lt;code&gt;final&lt;/code&gt;限制吧，它的所有变量都用&lt;code&gt;private&lt;/code&gt;，如果外部要访问，就提供&lt;code&gt;accessor&lt;/code&gt;，也就是相应的&lt;code&gt;getter&lt;/code&gt;函数，当然，如果是私有的变量，应该就不需要被从外部修改了，也就不需要&lt;code&gt;setter&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果一个类被设计成其他类的基类，先要判定它的哪些变量和方法是要给它的衍生类用的，哪些是它自己用的，分别给&lt;code&gt;protected&lt;/code&gt;和&lt;code&gt;private&lt;/code&gt;，当然提供给外部的还是要&lt;code&gt;public&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;隔离变化&#34;&gt;隔离变化&lt;/h2&gt;

&lt;p&gt;这四个字简直就是软件设计的万物之源。&lt;/p&gt;

&lt;p&gt;每当提到设计模式，总会说到六大原则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;单一职责原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;里氏替换原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;依赖倒置原则&lt;/li&gt;
&lt;li&gt;&lt;em&gt;接口隔离原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;迪米特法则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;开闭原则&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看看这6大原则中有几个是和『隔离变化』有关的？&lt;/p&gt;

&lt;p&gt;这些『总纲』性质的东西离实际的编码其实还是有些距离的，但并不妨碍我践行它们。比如：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编写职责单一的小方法，而不要写大方法&lt;/p&gt;

&lt;p&gt;目前我在公司维护的代码这个问题非常严重，动辄几百行上千行的方法你服不服？如果真是业务逻辑复杂，难以解耦也就算了，你知道这里面有多少行是记日志用的？少说有1/4。为什么？因为记日志没有列出单独的方法，每次记日志前先要读配置文件，指定日志要写到什么地方，然后给要记录的内容数组的每个字段赋值，最后调用封装的write_log方法记日志。这一套拳打下来至少有8行了。
还有就是要通过&lt;code&gt;echo&lt;/code&gt;把数据返回给接口调用方，每个接口最后都要有6行的&lt;code&gt;if/else&lt;/code&gt;，因为首先要判断是否数组，然后决定是否&lt;code&gt;json_encode&lt;/code&gt;，&lt;code&gt;echo&lt;/code&gt;完结果再防止Yaf模板引擎渲染还要&lt;code&gt;exit&lt;/code&gt;。何况不只是每个方法最后要这样，中间可能会因为出错而提前退出，也要再打这一套拳。想象一下这里面有多少重复代码了！
如果是我自己的项目，我肯定会考虑引入&lt;code&gt;monolog/monolog&lt;/code&gt;，让处理日志的繁杂工作都留给专业的Component去做多好？而返回值呢，我会选择&lt;code&gt;symfony/httpfoundation&lt;/code&gt;。
但是，这不是我自己的项目。所以我只好仿照&lt;code&gt;monolog/monolog&lt;/code&gt;的语法，写了个简单的工具类用来实现一行代码记日志，避免业务代码被记日志的代码淹没。然后我在接口的基类中添加了一个&lt;code&gt;sendResponse&lt;/code&gt;方法，把上面提到的一系列判断、退出都封装起来，我知道这样其实是不合理的，因为接口类不应该承担如何设置&lt;code&gt;Response&lt;/code&gt;的职责，最好的方法是也许是搞一个Service Container，优雅是优雅了，但代码量也大啊，业务需求那么多。。。。
说这么多，宗旨就是多写一些实用的小方法，不写长方法，这样就可以很放心的修改一个小方法从而起到影响全局的作用了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;面向接口而不是面向实现&lt;/p&gt;

&lt;p&gt;这一点其实还可以接着上面的谈，比如在第一版实现中，由于业务简单，我写了一个方法&lt;code&gt;composeObjectWidthAndLength&lt;/code&gt;，用来把从前端传来的长和宽放在扩展字段中，然后返回一个不带长宽字段而增加了扩展字段的数组，但后面发现需要在存储对象之前修改的东西越来越多，那么我就可以很方便的在这个函数内部做修改，然后把这个方法重命名一下。多么美好！
还有一点是让我觉得我的坚持很值得。
有一次说要替换发私信服务的接口，很显然新接口的函数签名和老的不一样，那怎么办呢？幸好我之前的发私信功能就把这个功能抽出来了，需要替换时只需要修改&lt;code&gt;adapter&lt;/code&gt;方法就可以了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;数据一致性&#34;&gt;数据一致性&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不要让一个变量在多处被修改&lt;/p&gt;

&lt;p&gt;这个问题挺难解决的。尤其是『更新』缓存数据的时候。为了性能，我们把数据存在缓存里，但缓存并没有提供给我们『更新』功能，而只能先读取，改了数据之后再写回。很显然这个操作不是原子的，但好在对单个key的读取并不频繁。即便这样也会出现先读取了某个值，然后调用某个方法，在这个方法内部又读了它的值并且修改后回写到了，方法执行完，我们以为缓存中的值还是我第一次取的，再按当前的逻辑修改，写回。好，上一次的修改就被覆盖了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;时效性&#34;&gt;时效性&lt;/h2&gt;

&lt;p&gt;这就是时间管理的问题了。我在写了一段时间代码之后，发现拿到需求以后自己再梳理一遍，最好能落实到书面上，或者写在GTD工具里（不需要太复杂的，我觉得奇妙清单这种就足够了），实施的时候对照着一项一项的完成，其实效果要比拿到需求就埋头写要高得多。&lt;/p&gt;

&lt;p&gt;联想到我刚入行的时候，我师父总是不厌其烦的跟我强调一定要弄清楚需求，不然老是做无用功。后来的职场让我深刻的体会了这个方针。&lt;/p&gt;

&lt;p&gt;还记得师父对我最严重的一次鄙视：&lt;/p&gt;

&lt;p&gt;我终于把Vim配置好了，这样效率就高多了。
师父回了一句，你有什么效率啊。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>谈谈动/静态类型和强/弱类型</title>
      <link>http://lovelock.coding.me/miscs/static-dynamic-strong-weak-types-of-language/</link>
      <pubDate>Sat, 09 Jan 2016 21:11:33 +0800</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/static-dynamic-strong-weak-types-of-language/</guid>
      <description>&lt;p&gt;作为一个PHP程序员，这个问题本来不应该是我考虑的。
我需要知道仅仅是如果我的程序需要接受一个integer作为输入，拿到输入后最好能&lt;code&gt;intval($var)&lt;/code&gt;一下，保证输入的是integer。而让我感到不理解的是，为什么PHP的强制类型转换会做成&lt;code&gt;(int)$var&lt;/code&gt;这种方式，按照正常人的理解，不管&lt;code&gt;int/string&lt;/code&gt;是关键字还是函数，要么作为&lt;code&gt;int $var&lt;/code&gt;，这样具有迷惑性，因为在别的语言里这都是用来&lt;strong&gt;声明变量&lt;/strong&gt;的，要么&lt;code&gt;int($var)&lt;/code&gt;，这都很容易理解，然而。。。&lt;/p&gt;

&lt;p&gt;好了，想到这个问题是因为这两天算是深入的用了Python的一些功能，当然主要还是用来处理日志，当我发现当我将两个从&lt;code&gt;dict&lt;/code&gt;中取出的值相加，然后和一个数字的值对比时，并没有出现我要的结果。于是就查了下Python的类型。原来Python是&lt;strong&gt;动态类型&lt;/strong&gt;，同时是&lt;strong&gt;强类型&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我看到网上很多人对这个问题还挺迷惑。刚看了PHP对于类型的解释，其实很能说明问题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP 在变量定义中不需要（或不支持）明确的类型定义；变量类型是根据使用该变量的上下文所决定的。也就是说，如果把一个 &lt;code&gt;string&lt;/code&gt; 值赋给变量 &lt;code&gt;$var&lt;/code&gt;，&lt;code&gt;$var&lt;/code&gt; 就成了一个 &lt;code&gt;string&lt;/code&gt;。如果又把一个&lt;code&gt;integer&lt;/code&gt; 赋给 &lt;code&gt;$var&lt;/code&gt;，那它就成了一个&lt;code&gt;integer&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这，就是标准的动态类型了。相应的，&lt;code&gt;var a = 20 :Int&lt;/code&gt;，声明了变量&lt;code&gt;a=20&lt;/code&gt;，同时指定该变量的类型是&lt;code&gt;Int&lt;/code&gt;，如果&lt;code&gt;var a = &#39;20&#39;: Int&lt;/code&gt;在编译时就会报错，没错这就是静态类型（这是Swift的语法）。有人可能就会拿这个举例说C也是静态类型——的确，我也会认为它是静态类型，因为它也需要指定类型才可以定义——然而，判断是否是静态类型的根据并不在此，而是像&lt;a href=&#34;https://www.zhihu.com/question/19918532#answer-18824124&#34;&gt;知乎@姚培森的答案&lt;/a&gt;中说的，是根据它是否所有程序都是&lt;strong&gt;well behaved&lt;/strong&gt;。这个就太深了，我就不深究了，毕竟对C的研究也不深，说错了还不如不说。&lt;/p&gt;

&lt;p&gt;那再来看看让我误解的Python，无疑，Python和PHP一样在定义变量时也是不需要指定的，但对PHP来说，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$a = 1;
$b = &#39;2&#39;;
echo $a + $b;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的代码完全没有问题。但到了Python这里&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 1
b = &#39;2&#39;
print(a + b) # 没错，我选择Python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果呢:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Trt recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是强类型和弱类型的区别了。强类型不允许出现&lt;strong&gt;forbidden behaviors&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;从这一点也就可以理解为什么Python的JIT很早前就做出来了，而前段时间鸟哥还在说之前尝试做过PHP的JIT，但发现难度太大，而现在的PHP7实际就是在为后面的JIT铺路呢。&lt;/p&gt;

&lt;p&gt;但让我不解的是既然Python都在这方面占了优势了，为什么还是性能不行呢？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facebook的用户体验</title>
      <link>http://lovelock.coding.me/miscs/2015-11-22-Facebook%E7%9A%84%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Sun, 22 Nov 2015 13:56:28 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/2015-11-22-Facebook%E7%9A%84%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/</guid>
      <description>&lt;p&gt;上个星期登录Gmail突然发现多了好多Facebook的动态，仔细一看，原来我的头像都已经被别人换了。好吧，这还是我人生第一次帐号被盗的经历。&lt;/p&gt;

&lt;p&gt;马上改密码，结果重置完密码要登录了，却跳转到验证用户身份页，放出来几张“好友”的照片，让你认出来这都是谁。&lt;/p&gt;

&lt;p&gt;天了噜！！！！&lt;/p&gt;

&lt;p&gt;我怎么知道那都是谁！！！！我的账号被盗了啊！！！！那里面都是盗我的账号的人的图片，我怎么会认识？&lt;/p&gt;

&lt;p&gt;然后好玩的地方来了。&lt;/p&gt;

&lt;p&gt;我来到Facebook的帮助页，找不到我想要的内容，因为并没有发现关于用好友的照片来验证身份的相关信息。&lt;/p&gt;

&lt;p&gt;于是我想着也发起一个问题，等着大家来帮助我或者官方有人来帮我一下吧。但是&lt;strong&gt;发问题是需要登陆滴&lt;/strong&gt;，好吧，就这样陷入了一个死循环。&lt;/p&gt;

&lt;p&gt;我不理解的是，在用照片验证好友身份时是存在『我在这一步遇到了麻烦』这样的链接的，但为什么就没有考虑到用户的账户已经被盗并且内容全部被黑客替换的情况呢？&lt;/p&gt;

&lt;p&gt;我甚至恶意的猜测这黑客是深谙Facebook的身份认证机制的，窃取了你的账户之后马上上传一堆你不认识的人的照片，让你即使改了密码也无法登陆。&lt;/p&gt;

&lt;p&gt;而且我看到帮助区有很多人都期待能得到Facebook官方的帮助，甚至有人说，那看起来很诱人，说是有官方的帮助，但实际上你问了问题从来得不到回复。&lt;/p&gt;

&lt;p&gt;好吧，就是这样一个世界级的大公司。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>也谈封杀</title>
      <link>http://lovelock.coding.me/miscs/2015-10-09-%E4%B9%9F%E8%B0%88%E5%B0%81%E6%9D%80/</link>
      <pubDate>Fri, 09 Oct 2015 18:47:29 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/2015-10-09-%E4%B9%9F%E8%B0%88%E5%B0%81%E6%9D%80/</guid>
      <description>&lt;p&gt;看到&lt;a href=&#34;https://blog.coding.net/blog/art-of-block&#34;&gt;读《robbin 谈社区运营：封杀的艺术》有感&lt;/a&gt;提到了社区之间的封杀，因为我用社区比较少，最近才接触到&lt;a href=&#34;https://coding.net&#34;&gt;Coding.net&lt;/a&gt;这个优秀的工具，所以并没有感受到社区之间的屏蔽、封杀。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;让我感受最深的是国内BAT三大巨头的明争暗斗。&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;毕竟开发者这个特殊的群体太聪明，给不了他们自由肯定心里不舒服。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这句话深得我心，作为一个开发者，看到常用的App之间不能愉快的分享内容，就像嗓子眼有一口苍蝇一样恶心——而这罪魁祸首就是&lt;strong&gt;腾讯&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;为了扶植自己家的产品，就打击、屏蔽、封杀别家类似的产品，这就是国内顶尖公司的气度和胸怀。&lt;/p&gt;

&lt;p&gt;腾讯有QQ音乐，我最喜欢的网易云音乐无法分享到微信好友、朋友圈或QQ好友、空间。&lt;/p&gt;

&lt;p&gt;腾讯有拍拍，同时还和京东深度合作，淘宝就只能用一串看不懂的消息作为分享工具，用过的你自然知道这有多恶心。我甚至认为阿里在支付宝里集成了类似微信的功能就是为了对抗微信的封杀，然并卵。&lt;/p&gt;

&lt;p&gt;腾讯&lt;strong&gt;现在&lt;/strong&gt;的海淘还不成气候，所以同属网易的&lt;strong&gt;考拉海购&lt;/strong&gt;可以幸免于难。可以想见不远的将来，为了给京东全球购提供更多的入口，考拉海淘也将被加入黑名单。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;号称拥有国内最好的产品经理的腾讯在利益面前完全置用户体验于不顾。当许多人都在吐槽百度虚假医疗信息吃相难看时，腾讯，你是应该嘲笑还是脸红？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我是一个普通的老百姓，只不过职业是程序员，经常莫名其妙的被挡在土啬内的经历让我对这种封杀行为特别厌恶，而在我们这个伟大的局域网内，我们的民族企业们，&lt;/p&gt;

&lt;p&gt;你们就不能有一点胸襟吗？
难道对自己的产品就那么没有信心？
通过正常的方式无法达到你们的推广目的？&lt;/p&gt;

&lt;p&gt;诚然，因为腾讯拥有无与伦比的用户基数，它才敢这样肆无忌惮，也正是因此，他们的这种做法很可能会收到预期的效果，而那些小公司就更是绞尽脑汁博眼球了。这句话是看到小猪短租最近的广告的感想，曾经的小猪，『有人情味儿的住宿』是它的口号，尽力维护房客和房东的利益，而现在它竟然公然站在了房东方，说什么房租太低、房租需要涨之类的说辞，虽然博得了潜在房东的好感——也未必，但那些潜在的房客怎么想？&lt;/p&gt;

&lt;p&gt;你们这些公司啊，就不能关注一下自己的&lt;strong&gt;美誉度&lt;/strong&gt;吗？也许在投资人面前，你们的理想显得太不现实、太渺小，但我觉得起码的争取一下也不至于达到现在这样的结果。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>这一天，就这样过去了</title>
      <link>http://lovelock.coding.me/miscs/2015-10-08-%E8%BF%99%E4%B8%80%E5%A4%A9%EF%BC%8C%E5%B0%B1%E8%BF%99%E6%A0%B7%E8%BF%87%E5%8E%BB%E4%BA%86/</link>
      <pubDate>Thu, 08 Oct 2015 15:47:46 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/2015-10-08-%E8%BF%99%E4%B8%80%E5%A4%A9%EF%BC%8C%E5%B0%B1%E8%BF%99%E6%A0%B7%E8%BF%87%E5%8E%BB%E4%BA%86/</guid>
      <description>&lt;p&gt;我是来自中国大陆的一名开发者。&lt;/p&gt;

&lt;p&gt;最近的项目需要用到WebRTC相关的技术，通过搜索引擎找到了&lt;a href=&#34;http://www.html5rocks.com&#34;&gt;http://www.html5rocks.com&lt;/a&gt;这个网站，在上面找到了很多有用的信息，我知道了要搭建一个完整的WebRTC应用，需要浏览器支持&lt;code&gt;getUserMedia&lt;/code&gt;等一系列API，这个网站我在自己的笔记本电脑上时可以访问的，但换了个电脑就不能访问了，问了别人，他们说是这个电脑没有配置一个东西，具体他说是什么我忘记了，而我自己的电脑上什么时候装了什么我也&lt;strong&gt;忘记&lt;/strong&gt;了。&lt;/p&gt;

&lt;p&gt;于是我按照这篇文章顺利的在本地搞起了一个可以调用本地摄像头和麦克风的Web应用，不过一个完整的WebRTC应用还需要STUN/TURN/ICE服务器用于穿透NAT，百度了一下，发现有人说一个叫做Google的公司提供了一个STUN服务器，供公众使用，我没有听说过这个公司，但配置上这个服务器后，服务真的能用了。当然，WebRTC协议并没有规定Signalling Channel的实现，这里我用了&lt;a href=&#34;http://socket.io&#34;&gt;Sockt.io&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;其实我最终的目的是要实现在iOS/Android上使用基于WebRTC的实时聊天服务，听说&lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;上有很多有用的项目，我就想找一个看看，但在浏览器里面输入了这个网址之后并没有像百度那样马上打开，而是慢慢悠悠的很久才出现了一个没有样式的页面，我不知道是哪里出了问题，于是用5分钟拼命刷新这个页面，最后在同事的帮助下终于有了样式，当时我就很纳闷为什么据说这么牛逼的网站访问速度这么慢，难道他们不知道
CDN吗？真是不理解。诶，算了，不纠结这个了，我现在终于可以开始搜索项目了，诶，搜索个东西还是这么慢，诶，找到了，&lt;a href=&#34;https://github.com/webrtc/apprtc&#34;&gt;https://github.com/webrtc/apprtc&lt;/a&gt;，看起来好高大上的样子，还是英文的说明，我不怎么能看懂，但照着一步一步做总得会啊，于是装了&lt;code&gt;Node.js&lt;/code&gt;，用&lt;code&gt;npm&lt;/code&gt;装了那些东西，当执行到&lt;code&gt;npm install&lt;/code&gt;那一步时停住了，我不知道发生了什么，但看那篇英文说明里好像是要下载
&lt;a href=&#34;https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python&#34;&gt;https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python&lt;/a&gt;这个东西，又是这个叫Google的公司，前面它搞了个服务器，这又搞什么东西让我下载不下来呢？算了，我把这个项目下载下来吧。&lt;/p&gt;

&lt;p&gt;上面写的是我昨天做的事情，现在还在下载这个项目，不知道为什么它那么慢，而且下载了30%多的时候老是出错，就不动了，我就点重试，就像我认为重启能解决所有问题一样，下载不下来肯定是这家网站不稳定导致的，多试几下肯定能好吧。但现在也还没有下载完，我有点不耐烦了。&lt;/p&gt;

&lt;p&gt;算了，找个iOS能用的Demo来看看吧，咦，&lt;a href=&#34;https://github.com/ISBX/apprtc-ios&#34;&gt;https://github.com/ISBX/apprtc-ios&lt;/a&gt;这个不错，下载吧，貌似这个项目不大，用了两个小时就下完了，还需要&lt;code&gt;CocoaPods&lt;/code&gt;，嗯，这个之前有人帮我装过，我只需要在项目所在的目录里执行&lt;code&gt;pod install&lt;/code&gt;就可以了，诶，不对，又出错了，&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/b_Screen%20Shot%202015-10-08%20at%204.02.41%20PM.png&#34; alt=&#34;报错图片&#34; /&gt;。&lt;/p&gt;

&lt;p&gt;我不想搞了，作为一个程序员怎么都不会上网了呢？是不是我不适合干这行啊？&lt;/p&gt;

&lt;p&gt;我觉得吧，百度才是这个世界上最好的网站，打开的速度快，界面还简洁。最重要的是他家老板长得帅。&lt;/p&gt;

&lt;p&gt;明天辞职吧，回家种地可能要容易一些，再也不想看到这些那么慢的网站了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>打破矛盾</title>
      <link>http://lovelock.coding.me/miscs/2015-09-20-%E7%89%A2%E9%AA%9A/</link>
      <pubDate>Sun, 20 Sep 2015 17:09:10 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/2015-09-20-%E7%89%A2%E9%AA%9A/</guid>
      <description>&lt;p&gt;感觉这段时间自己处在一个很郁闷的时期，能意识到却又跳不出来。就像夜里做梦，有时会知道自己是在做梦，在梦里大喊大叫却听不到任何声音——那种无助感，终于在现实中出现了。&lt;/p&gt;

&lt;p&gt;这种压力主要来自两个方面，一个是工作，一个是生活。&lt;/p&gt;

&lt;p&gt;工作中的压力其实并没有那么大，不像之前的工作一个人承担项目中的所有工作，加上进度的压力，导致非常焦虑。而现在更多的是急于提升自己，却找不到有效的途径，或者说找不到自己的方向，对自己的角色和职责认识的不够清楚。
我的专职工作是Web开发，更准确的说是Web后端开发者，虽然也会写一些JavaScript，但毕竟不是专职的，写那些东西只是用来应急而已。但自己总是暗示要做一个全栈工程师，虽然现在很多人都开始对全站工程师这个名头嗤之以鼻，但我知道这确实是真实的存在，只不过自己的水平尚未达到而已。在我的认识中，我认为一个优秀的开发者做的工作应该是设计系统的架构、完成底层的基础设施建设，而不是在上层不疼不痒的调用现成的接口，这并不是我想要的做的工作，然而事实是我所在的部门就是一个业务部门，而公司又是这样的一个大公司，多年以前那些底层架构就已经完成了，不会再需要大的变动，更多的人就是在像我一样不停的根据业务的需求添加对底层接口的不同调用组合。&lt;/p&gt;

&lt;p&gt;这导致我对自己的工作并没有那么满意，总觉得不能做出一个开创性的工作来，以至于见到新潮的技术就想了解一下，但迫于工作的压力(借口)又总是不能把相关的知识完整的掌握，久而久之就成为了什么都知道，但什么又都不知道的状态。这才是最危险的。&lt;/p&gt;

&lt;p&gt;比如，我从内心里觉得Python作为平时处理日志等等工作最合适的脚本，当然我也在做这方面的尝试，如果能用Python完成的任务就不用PHP写，这其中一个最主要的原因是Python的标准库比较好用，最基础的一个发送HTTP请求，PHP竟然需要用libcurl搞那么复杂才能实现，而Python只需要用urllib2这个标准库就可以了，当然这方面的例子数不胜数——但是，我就是一个PHP程序员，这在现阶段也是改变不了的事实，而且就目前使用Python的概率，我也几乎没有可能把Python作为第一语言在工作中使用。&lt;/p&gt;

&lt;p&gt;举这个例子不是要引起语言之争，说PHP比Python快如何如何，但Python写起来确实会比PHP更优雅一些。同样的还有，我总是对移动App开发跃跃欲试，在买了rMBP之后更是对自己终于可以进行iOS开发兴奋不已，然后确实坚持了一段时间，学了各种View，知道了如何拖控件画界面，如何敲代码画界面，也用原生的网络库做了个简单的Demo，仅此而已，领导让我学习移动开发，但事实上工作中时不时的要插进来新的任务，完全要靠工作之余的时间来进行，但业余时间又不能全部用来做这个开发，毕竟和我目前的工作几乎没有任何交集，如果把精力都放在这上面，那PHP相关的知识就没有时间更深入了，比如流行的框架，Laravel/Yii等。&lt;/p&gt;

&lt;p&gt;这样矛盾的心理把我折磨的着实不轻，把自己搞成了熊瞎子掰玉米。&lt;/p&gt;

&lt;p&gt;至于生活的压力那肯定就是经济压力了，今年25岁了，虽说年龄不大，但也不小了，即使说小也说不过去了，因为孩子已经出生了，我也早已经没有了年轻的资本。家里人劝说在北京买房遥遥无期，每月挣的钱最后也剩不下什么，在北京拿这些钱不如到二线城市拿一半的钱过得好。不知道为什么他们说这些话时我竟然从未动心。因为我知道我的兴趣就在这个行业，无论工作多么辛苦我都能接受，但如果让我去做清闲的工作，但我不感兴趣，那倒还不如不做。&lt;/p&gt;

&lt;p&gt;说到底还是我以前太听父母的话了，上大学选专业的时候完全没有自己的主见，那个时候隐隐的感觉自己喜欢做和电脑相关的工作，但迫于家里的压力就选了他们希望的专业，当然最终并没有按他们的意愿进入相应的专业而是被调剂到了生物工程专业，这个专业真的对我的人生产生了很大的影响，我甚至认为我就这样在学校浪费了四年的时光，因为这些年里学到的东西我在工作中几乎完全用不上，而且如果没有这些我完全不感兴趣的课可能我现在的专业技能还要更高一些。具体的就不再详细说了。可能最重大的影响是它让我做自己没有兴趣的事情的时候找到了
真正的兴趣，并能坚持下来。周围很多人都不理解为什么我一个学生物工程的竟然跳到了完全不相干的软件行业，那我的答案只有两个字——兴趣。我不想把自己标榜的有多高尚。有些人说非相关专业的人进入这个行业无非是看到了这个行业的高薪和迅猛的发展势头。如果非要把这个作为我选择的理由，那么它也一定不是第一位的。&lt;/p&gt;

&lt;p&gt;我从内心里对那些成功的企业家没有太大的崇敬感，倒是对这个领域的优秀的前辈们充满了无限的憧憬。远到C语言的作者丹尼斯·里奇，Unix作者肯·汤普森，自由精神传道士RMS，Linux作者李纳斯·托尔德这些神一样的存在，近到和我们的软件开发密切相关的软件工程实践领域的拓荒者，马丁·福勒，设计模式四人帮等等。他们的工作让我心向往之然又不能及。&lt;/p&gt;

&lt;p&gt;写到这里，我又忽然想到好像他们也都是有自己专攻的领域，这些奇人大多是专长在某一个特定的领域，而对其他的领域只是略知一二，尤其他们在自己的著作中也会提到这一点，在自己不熟悉的内容的章节会邀请该领域的专家来执笔，避免自己片面的认识误导了读者。&lt;/p&gt;

&lt;p&gt;那这么看来，确实做任何事情都是有舍才有得。&lt;/p&gt;

&lt;p&gt;我记得之前看李纳斯・托尔德的父亲的一次访谈中，他谈到儿子的成功跟当时的大环境不无关系，因为那个时代知识很少，所以一个普通人如果毅力坚定，那么成功的机会很大。但现在这个知识爆炸的年代，如果一个人想把所有的知识都学到，那么肯定要累死了。所以还是要坚定自己的方向，才能真正提升自己的价值，成为该领域真正的专家。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>也谈创业</title>
      <link>http://lovelock.coding.me/miscs/%E4%B9%9F%E8%B0%88%E5%88%9B%E4%B8%9A/</link>
      <pubDate>Fri, 10 Jul 2015 00:17:38 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/%E4%B9%9F%E8%B0%88%E5%88%9B%E4%B8%9A/</guid>
      <description>&lt;p&gt;我竟然在标签里写了“情怀”两个字。&lt;/p&gt;

&lt;p&gt;自从罗永浩做了锤子手机，“情怀”就变成了一个被用烂了的词，但不可否认的是，它是确实存在的东西。&lt;/p&gt;

&lt;p&gt;今天中午和同事聊天，谈到了中国和国外的创业者的不同之处，其中有一条，那就是创业者的初心。&lt;/p&gt;

&lt;p&gt;我们中国的创业者们其实多数并不是想真正要做一款成功的产品，而是看到了现在这个互联网的大潮，既然大家都有份，那么我也要去忽悠点投资人的钱来。于是就绞尽脑汁的为用户“臆想”出很多在我这样一个普通上班族看来根本没有任何意义的需求来。初期可以拿着这个根本不存在的需求去忽悠投资人，我想现在的投资者可能也是处于一个不理智的阶段，看到任何O2O的项目都想插一棒子进来——万一成功了呢？&lt;/p&gt;

&lt;p&gt;然而，这些CEO们拿了钱之后干什么呢？当然是提高自己的生活水平。他们把融来的投资的一大部分撞进来自己的腰包，然后若无其事的继续经营着公司——然后九成九的机会公司死掉了，但他已经用这样一个特殊的方式把钱赚到了。&lt;/p&gt;

&lt;p&gt;我们再看国外那些成功的创业者们，最初创办公司的目的都是实现自己的价值——有的是自己有一个想法，想把想法卖给大公司但遭到拒绝，于是奋发图强，自己做；有的是眼看着自己所在的公司无法把自己寄予厚望的产品做的符合自己的理想——这些人做出来的产品能不成功吗？&lt;/p&gt;

&lt;p&gt;我们还谈到了中国公司对于开源社区的贡献问题，中国的互联网行业存在大量对互联网技术毫不关心的从业者，他们工作仅仅就是为了挣口饭吃，他们不关心技术的发展潮流，不关心怎样提高自己的技术水平，需要什么东西到网上搜一搜，基本都能找到现成的解决方案，为什么会这样呢？因为这些人做的是人家早就做过的东西。尤其对于开源社区，大部分人对它的理解就是——免费。对，但也不全对。我这里不去说RMS的理论，什么开源了，自由了之类的观点，我们的水平还达不到那一步。&lt;/p&gt;

&lt;p&gt;连起码的感恩之心都没有。&lt;/p&gt;

&lt;p&gt;放眼望去，中国有多少互联网公司用的是LAMP或者LNMP的技术架构？几乎全都是。那又有多少的公司在实现盈利之后&lt;strong&gt;意识到&lt;/strong&gt;我们的成功来源于开源社区的无私奉献，我们应该给他们一些捐赠？我想这个数量又是屈指可数的。想一下对于盗版的意识就知道了，不说资金不那么充足的小公司，就连很多大公司内部都明目张胆的使用盗版软件，设想一下，一个本来收费的东西你首先想到的不是正常的付费，而是要破解它，那一个不强制让你缴费的东西你会想到要&lt;strong&gt;主动&lt;/strong&gt;给他钱？&lt;/p&gt;

&lt;p&gt;白日做梦。&lt;/p&gt;

&lt;p&gt;而我们看到Whatsapp的创始人向FreeBSD基金会的捐款，看到FaceBook对PHP的大量贡献，甚至一直为很多人不齿的微软每年为各个开源软件基金会的捐赠也不在少数，这方面，我们的意识还差得远。&lt;/p&gt;

&lt;p&gt;而我自己也在筹划一个项目，在项目成型之前我把它暂时放在bitbucket上面作为个人项目进行开发，等能够正常运行了再开放出来。但是目前还处在技术选型阶段，感谢开源社区给了我那么多选择。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一位老人在地铁上摔倒想到的</title>
      <link>http://lovelock.coding.me/miscs/2015-06-12-wei-lao-ren-zai-di-tie-shang-shuai-dao-xiang-dao-de/</link>
      <pubDate>Fri, 12 Jun 2015 10:29:55 +0800</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/2015-06-12-wei-lao-ren-zai-di-tie-shang-shuai-dao-xiang-dao-de/</guid>
      <description>&lt;p&gt;今天地铁上还是像往常一样那么多人，我终于在站了近半小时之后有了一个座位。&lt;/p&gt;

&lt;p&gt;不知道何时在我左边的左边出现了一位白发苍苍，大概60多岁的老太太。我注意到她还是因为我邻座的那个哥们儿要主动给她让座儿，但是她并没有接受，解释说她自己两站就下车了，没关系的，还不忘谢谢那个年轻人，说话的语气不卑不亢，很有电视上那些老一辈的文化人的风度。&lt;/p&gt;

&lt;p&gt;过了一站，她开始往门口走去，这时车上人没有那么拥挤了，在她刚以为自己站稳的时候，车启动了，她就很自然的倒了下去，幸好前面有人拉了一把，她身后的人也拖了一下，她并没有重重的摔下去。站起身后她又站在那个位置，重新开始等待下一站。&lt;/p&gt;

&lt;p&gt;我想，这才是真正的和谐社会。老人不会倚老卖老，而年轻人其实更希望能多见到这样的老人，他们是值得尊敬的人，不像有些上车就问年轻人索要座位的“老人”。&lt;/p&gt;

&lt;p&gt;我甚至遇到过有一群年纪看起来在50左右的“老人”一进地铁就开始“互相”的说话，说现在的年轻人如何如何，不给他们这些老年人让座儿，这时旁边一位年纪差不多的中年人，他说“你们也不看看自己这么年轻，还好意思说自己是老年人！”这时，这几个“老年人”就不乐意了，怒斥道“那你说说你多大了，你要是比我们大，那我们就把作为让给你！”果然有年轻人听不下去了，就给那个“老年妇女”让了个座儿，我估计是她自己面子上也挂不住了，刚坐下一会儿就把座位又让给了一个带孩子的母亲。&lt;/p&gt;

&lt;p&gt;没有任何人应该为一个陌生人做任何事，人家做了，是他的好心，但要记住，那不是人家的义务，你也不用拿自己的弱势做理由来道德绑架别人，这样做只会惹来别人的反感。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ActiveX控件在浏览器中使用的注意事项</title>
      <link>http://lovelock.coding.me/miscs/2015-05-08-activexkong-jian-zai-liu-lan-qi-zhong-shi-yong-de-zhu-yi-shi-xiang/</link>
      <pubDate>Fri, 08 May 2015 22:17:04 +0800</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/2015-05-08-activexkong-jian-zai-liu-lan-qi-zhong-shi-yong-de-zhu-yi-shi-xiang/</guid>
      <description>&lt;p&gt;好吧，我承认这段事件做的工作是和前端的关系比较大，但其实最主要的功能是我们的合作方提供的一个ActiveX控件完成的，而我需要让我的用户在浏览器中调用这个控件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ActiveX控件真的是很过时的技术，但不得不承认目前的用途还是比较多，因为要和硬件打交道，这方面我的知识比较欠缺，连搜索的关键词都想不到。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样一来，自然而言的就产生了一些限制。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用户操作系统—— Windows&lt;/li&gt;
&lt;li&gt;用户客户端—— Internet Explorer&lt;/li&gt;
&lt;li&gt;操作系统注册ActiveX控件&lt;/li&gt;
&lt;li&gt;浏览器进行相应的安全设置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对，我主要说的就是这第四条，这里满满的槽点。&lt;/p&gt;

&lt;p&gt;先说解决方案
1. 将网址加入到“受信任的站点列表”中。这一步可以ActiveX控件在浏览器中加载并执行，但它会在每次打开的时候询问。
2. 选择安全等级的自定义，选中“对未标记为可安全执行脚本的ActiveX控件初始化并执行脚本”的“启用”项。这一下就不需要询问了。&lt;/p&gt;

&lt;p&gt;首先，当没有把网站加到“受信任的站点列表”时，我能看到的结果就是功能无法执行——问题是如果代码在我本地的硬盘里，直接右键用IE打开是可以执行的，而只要一放在服务器上就不行了。网上搜索一下，关于ActiveX的帖子很少，而在这很少的帖子里面有很多遇到这种问题，但通常是自己写的控件出现的，我对Windows的这项技术完全没有兴趣，也就没有去研究如何编写一个控件了。重点是帖子虽然并不少，但都是问道最后也没有个结果。终于找到一个说到解决方案的，说是要实现一个接口，我心想我这也不是.NET平台，难不成还用JS给你实现接口？肯定不
可能，最终终于让我在一个犄角旮旯发现了这个问题的答案——“受信任站点”，而且这个作者也强调，如果不加入受信任站点，即使在安全自定义里面开启了上面解决方案的第二步也是不起作用的。&lt;/p&gt;

&lt;p&gt;对，现在有了解决方案，但我不理解的是微软为什么不弹出一个提示告诉我这是这个问题引起的呢？&lt;/p&gt;

&lt;p&gt;本地的代码能执行，放在远端的服务器上就不行，而我的服务器又是运行Nginx的Linux服务器，我很难不把这个问题联想到平台的不兼容上去，甚至想到了在Linux上安装ActiveX控件——当然这个不是我提出来的，很明显不可能。或者服务器用Windows平台的IIS，我甚至用这个方案在我本地也搭了一个IIS服务器，结果还是一样的，只要是通过网络协议访问就是不行。&lt;/p&gt;

&lt;p&gt;最后我都已经怀疑这个方案是不是有问题，根本不可能实现时，看到了这个帖子。当时激动的我差点喊出来。&lt;/p&gt;

&lt;p&gt;我只想说一声Microsoft SUCKS!!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>函数默认参数比较</title>
      <link>http://lovelock.coding.me/miscs/2015-05-02-han-shu-mo-ren-can-shu-bi-jiao/</link>
      <pubDate>Sat, 02 May 2015 18:21:24 +0800</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.coding.me/miscs/2015-05-02-han-shu-mo-ren-can-shu-bi-jiao/</guid>
      <description>&lt;p&gt;当一个函数的参数很多，而有很多需要传输的数据都具有相同的属性值，那么我们可能希望可以不传入某些默认的参数，这就导致了函数默认参数这个需求的诞生。&lt;/p&gt;

&lt;p&gt;第一次注意到这个需求是在JavaScript中。它的实现是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function defaultParamTest(p1, p2, p3, p4) {
    p3 = p3 ? p3 : default_value_3;
    p4 = p4 ? p4 : default_value_4;
    // function body
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我不喜欢这样的实现，尝试着用我自己喜欢的方式，如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* 错误的代码 */
functon defaultParamTest (p1, p2, p3=default_value_3, p4=default_value_4) {
    // function body
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显然上面的是PHP的写法，JavaScript通不过。
既然说到了PHP的写法，那么就再写一段来展示一下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function defaultParamTest ($p1, $p2, $p3=&amp;quot;default_value_3&amp;quot;, $p4=&amp;quot;default_value_4&amp;quot;)
{
    // function body
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方式用起来简单直观，符合常理。
但今天又注意到Python的写法和PHP又有不同，这一点让我很惊喜。先上示例代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def default_param_test(p1, p2, p3 = &#39;default_value_3&#39;, p4 = &#39;default_value_4&#39;):
    # function body
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的写法你可能会认为和PHP的没有什么区别，其实区别是很大的，因为Python的这个默认参数可以省略第三个只要传入第四个，而PHP不可以。举例如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;defaultParamTest($p1v, $p2v, $p4v);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;default_param_test(p1v, p2v, p4=p4v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看出来区别了吧，PHP的是按顺序读入的参数，导致如果忽略第三个参数直接传入第四个参数，则函数会把你认为的第四个参数当成第三个,即使你显式的把参数列表写成&lt;code&gt;$p1v, $p2v, $p4=$p4v&lt;/code&gt;也没有区别。而Python的参数列表是有键的，也就是索引，在调用方法的时候也可以再参数列表中加上索引，告诉函数我传入的是第四个参数而不是第三个。
得出的结论当然是Python的实现最灵活，用起来也最舒服。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
