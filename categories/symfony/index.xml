<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Me &amp; Web</title>
    <link>http://unixera.com/categories/symfony/index.xml</link>
    <description>Recent content on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>frostwong@gmail.com (Frost Wong)</managingEditor>
    <webMaster>frostwong@gmail.com (Frost Wong)</webMaster>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <atom:link href="/categories/symfony/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Symfony3 In Action——Routing</title>
      <link>http://unixera.com/symfony/Symfony3-03-Routing/</link>
      <pubDate>Sun, 10 Jan 2016 22:02:07 +0800</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://unixera.com/symfony/Symfony3-03-Routing/</guid>
      <description>

&lt;p&gt;实际上前面我们已经看到了一个正常的页面了。是这样的
&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-10%20%E4%B8%8B%E5%8D%8810.17.26.png&#34; alt=&#34;成功安装的Symfony3运行界面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个默认的页面属于&lt;code&gt;AppBundle/Controller/DefaultController/indexAction&lt;/code&gt;，可以在该方法的annotation中找到对应的配置。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我不喜欢Annotation这种方式&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Annotation看起来是把路由信息和代码写在一起，增强了代码的可读性，但在我看来完全是没有必要的，因为这样我还需要在写代码的时候注意Annotaion的编写，一不小心写错了找都不好找。或者说，它增强了代码和配置的耦合。xml就不考虑了，那么冗长的写法谁受得了，幸亏没有提供JSON的支持——即便支持我也不用，JSON的可读性太差。所以YAML就成了我的首选。在本系列文章中，我都会用YAML方式做配置，包括但不限于路由控制、数据表设置等。&lt;/p&gt;

&lt;p&gt;不好的一点在于貌似官方还挺喜欢Annotaion，能下载到的Symfony Book、Symfony Cookbook都对YAML的介绍很少，默认都使用Annotation。然而这并不能阻挡我。&lt;/p&gt;

&lt;p&gt;废话了那么多，进入正题吧。&lt;/p&gt;

&lt;h2 id=&#34;配置文件的路径&#34;&gt;配置文件的路径&lt;/h2&gt;

&lt;p&gt;路由的配置文件在&lt;code&gt;app/config/routing.yml&lt;/code&gt;，&lt;code&gt;resource&lt;/code&gt;行就指定了它要寻找的路由配置的位置，&lt;code&gt;type&lt;/code&gt;行指定了要查找的路由配置格式，默认是annotation。&lt;/p&gt;

&lt;p&gt;首先解释一下为什么会是&lt;code&gt;app/config/routing.yml&lt;/code&gt;，当然是因为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;framework:
    #esi:             ~
    #translator:      { fallbacks: [&amp;quot;%locale%&amp;quot;] }
    secret:          &amp;quot;%secret%&amp;quot;
    router:
        resource: &amp;quot;%kernel.root_dir%/config/routing.yml&amp;quot;
        strict_requirements: ~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那你还会问，&lt;code&gt;%kernel.root_dir%&lt;/code&gt;是在哪里配置的呢？问得好，这个设置可不在配置文件里，是在&lt;code&gt;Symfony\Component\HttpKernel\Kernel.php&lt;/code&gt;中设定的，代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected function getKernelParameters()
    {
        $bundles = array();
        foreach ($this-&amp;gt;bundles as $name =&amp;gt; $bundle) {
            $bundles[$name] = get_class($bundle);
        }

        return array_merge(
            array(
                &#39;kernel.root_dir&#39; =&amp;gt; realpath($this-&amp;gt;rootDir) ?: $this-&amp;gt;rootDir,
                &#39;kernel.environment&#39; =&amp;gt; $this-&amp;gt;environment,
                &#39;kernel.debug&#39; =&amp;gt; $this-&amp;gt;debug,
                &#39;kernel.name&#39; =&amp;gt; $this-&amp;gt;name,
                &#39;kernel.cache_dir&#39; =&amp;gt; realpath($this-&amp;gt;getCacheDir()) ?: $this-&amp;gt;getCacheDir(),
                &#39;kernel.logs_dir&#39; =&amp;gt; realpath($this-&amp;gt;getLogDir()) ?: $this-&amp;gt;getLogDir(),
                &#39;kernel.bundles&#39; =&amp;gt; $bundles,
                &#39;kernel.charset&#39; =&amp;gt; $this-&amp;gt;getCharset(),
                &#39;kernel.container_class&#39; =&amp;gt; $this-&amp;gt;getContainerClass(),
            ),
            $this-&amp;gt;getEnvParameters()
        );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;顺着这个一步步的往下追，就可以查到每个kernel参数的来源了。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;刚才说到了路由配置，而且只想用yaml的格式，下面就改一下。&lt;/del&gt;
写这篇文章时之前我是坚持用yaml配置，但后来发现了这个
&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-23%20%E4%B8%8B%E5%8D%889.13.18.png&#34; alt=&#34;Symfony最佳实践&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我一向是很坚持遵守各个项目的最佳实践的，因为毕竟是正了个社区的大部分人确立的，能最大程度的发挥这个项目的威力。所以我准备介绍下yaml和annotation两种方式。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Annotation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;app:
    resource: &amp;quot;@AppBundle/Controller/&amp;quot;
    type: annotation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就表示从代码的Annotation中读取路由配置。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;app:
    resource: &amp;quot;@AppBundle/Resources/config/routing.yml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就表示会从&lt;code&gt;@AppBundle/Resources/config/routing.yml&amp;quot;&lt;/code&gt;中读取路由配置了。当然在下面也可以直接加上更多配置——&lt;del&gt;经过我的一番实验，发现在这里是无法引入第二个路由配置文件的，该文件不支持&lt;code&gt;import&lt;/code&gt;，不支持多个&lt;code&gt;resource&lt;/code&gt;。&lt;/del&gt;后来发现这里的&lt;code&gt;app&lt;/code&gt;段名字本身是没有意义的，可以设置多个，如这样就可以从多个不同的配置文件中引入路由配置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;app:
    resource: &amp;quot;@AppBundle/Resources/config/routing.yml&amp;quot;

app2:
    resource: &amp;quot;@AppBundle/Resources/config/routing2.yml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，在&lt;code&gt;resource&lt;/code&gt;中的配置优先级是比当前文件下面的高的。和在同一个文件中的配置一样，因为路由信息一旦匹配成功就不再往下找了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;路由规则&#34;&gt;路由规则&lt;/h2&gt;

&lt;h3 id=&#34;简单路由规则&#34;&gt;简单路由规则&lt;/h3&gt;

&lt;p&gt;一个最简化的可以执行的路由规则其实很简单，由path和defaults两部分构成。&lt;/p&gt;

&lt;p&gt;以下面的路由规则为例：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Annotation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
...
/**
 *@Route(&amp;quot;/&amp;quot;, name=&amp;quot;_welcome&amp;quot;)
 */
public function homepageAction()
{
   ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# app/config/routing.yml
_welcome:
    path:      /
    defaults:  { _controller: AppBundle:Main:homepage }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;path是URI中的Path部分，完整的路径就是&lt;code&gt;http://symfony.dev/app_dev.php&lt;/code&gt;，它被映射到&lt;code&gt;AppBundle/MainController/homepageAction&lt;/code&gt;上。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;带占位符的路由规则&#34;&gt;带占位符的路由规则&lt;/h3&gt;

&lt;p&gt;在RESTful的API设计中，是避免用query string的(存疑，待整理完Syfmony再来看RESTful)，相应的，用&lt;code&gt;/&lt;/code&gt;来分隔参数。我知道的有这样两种设计思路&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;带参数名 &lt;code&gt;/param1/value1/param2/value2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不带参数名 &lt;code&gt;/value1/value2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;很明显，第二种方式更简洁，因为程序肯定是知道第几个参数的意义是什么的，但这样客户端传递参数时就失去了灵活性。当然，在我看来，一个设计稳定的接口才重要，只要不随便改动，是没什么问题的。&lt;/p&gt;

&lt;p&gt;带占位符的路由规则&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Annotation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
...
/**
 *@Route(&amp;quot;/show/{title}&amp;quot;)
 */
 public function showAction()
 {
    ...
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;show:
    path:     /show/{title}
    defaults: { _controller: AppBundle:Article:show }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个路径会匹配所有/show/*，传进来的值会被当做参数&lt;code&gt;$title&lt;/code&gt;传递到方法&lt;code&gt;AppBundle\ArticleController\showAction&lt;/code&gt;中。例如，&lt;code&gt;/show/hello&lt;/code&gt;，那么在&lt;code&gt;AppBundle\ArticleController\showAction&lt;/code&gt;方法中拿到的&lt;code&gt;$title&lt;/code&gt;就是字符串&lt;code&gt;hello&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;可选占位符的路由规则&#34;&gt;可选占位符的路由规则&lt;/h3&gt;

&lt;p&gt;上面介绍了带占位符的路由规则，那考虑这样一个场景，我像让&lt;code&gt;/show&lt;/code&gt;显示&lt;code&gt;$page=1&lt;/code&gt;的文章，而不需要指定&lt;code&gt;/show/1&lt;/code&gt;，如果加了&lt;code&gt;/show/{page}&lt;/code&gt;则按照给定的显示。可以类比PHP函数的默认参数，也很简单&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Annotation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
...
/**
 *@Route(&amp;quot;/show/{page}&amp;quot;, name=&amp;quot;page_show&amp;quot;, defaults={&amp;quot;page&amp;quot; = 1})
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;page_show:
    path:     /show/{page}
    defaults: { _controller: AppBundle:Article:page, page: 1 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;两种形式看起来不一样，其实功能都是一一对应的。&lt;/p&gt;

&lt;h3 id=&#34;参数要求&#34;&gt;参数要求&lt;/h3&gt;

&lt;p&gt;上面两个例子会有冲突吗？当然会！比如&lt;code&gt;/show/2&lt;/code&gt;表示要展示第二页，那会不会是标题是2的文章呢？要怎么判断？&lt;/p&gt;

&lt;p&gt;可以看到，&lt;code&gt;show&lt;/code&gt;要求的参数是字符串，也就是文章的标题，而&lt;code&gt;page_show&lt;/code&gt;要求的参数是数字，也就是页数。所以可以用简单的正则表达式来做一下匹配。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Annotation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
...
/**
 *@Route(&amp;quot;/show/{page}&amp;quot;, name=&amp;quot;blog_show&amp;quot;, defaults={&amp;quot;page&amp;quot;: 1}, requirements={&amp;quot;page&amp;quot;: &amp;quot;\d+&amp;quot;})
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;page_show:
    path:     /show/{page}
    defaults: { _controller: AppBundle:Article:page, page: 1 }
    requirements:
        page: \d+
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样，所有匹配到数字的参数都会作为page，反之是title，就不会有任何冲突了。&lt;/p&gt;

&lt;h2 id=&#34;指定http-method&#34;&gt;指定HTTP Method&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Annotation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
...
/**
 *@Route(&amp;quot;/contact&amp;quot;, name=&amp;quot;contact_form&amp;quot;)
 *@Method({&amp;quot;GET&amp;quot;, &amp;quot;POST&amp;quot;})
 */
public function contact_formAction()
{
   ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;contact_form:
    path:     /contact
    defaults: { _controller: AppBundle:Article:contact_form }
    methods: [GET, POST]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样就要求只有用GET/POST方法，并且匹配到path才能完全匹配这条路由。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果没有指定方法，那任何方法都能匹配。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;指定host域名&#34;&gt;指定HOST域名&lt;/h2&gt;

&lt;p&gt;假如你当前维护的一套代码运行在两个域名上，例如&lt;code&gt;m.example.com&lt;/code&gt;和&lt;code&gt;example.com&lt;/code&gt;，其中m开头的是只有移动端才会访问，这时要实现访问同一个path，但会route到不同的controller，就需要指定host域名了。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Annotation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
...
/**
 *@Route(&amp;quot;/update&amp;quot;, host=&amp;quot;symfony.dev&amp;quot;, name=&amp;quot;update&amp;quot;)
 */
public function updateAction()
{
    echo __METHOD__;
    exit;
}

/**
 *@Route(&amp;quot;/update&amp;quot;, host=&amp;quot;m.symfony.dev&amp;quot;, name=&amp;quot;mobile_update&amp;quot;)
 */
public function mobile_updateAction()
{
    echo __METHOD__;
    exit;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;mobile_update:
    path:     /update
    host:     &amp;quot;m.example.com&amp;quot;
    defaults: { _controller: AppBundle:Article:mobile_update }
    
update:
    path:     /update
    host:     &amp;quot;example.com&amp;quot;
    defaults: { _controller: AppBundle:Article:update}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;host字段和path字段一样，支持placeholder，同时支持默认值和正则匹配。&lt;/p&gt;

&lt;h2 id=&#34;用-condition-完全自定义路由规则&#34;&gt;用&lt;code&gt;condition&lt;/code&gt;完全自定义路由规则&lt;/h2&gt;

&lt;p&gt;使用The Expression Syntax component可以实现在YAML中用一种表达力很强的标记来实现高度自定义的路由规则。&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Annotation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
...
/**
 *@Route(&amp;quot;/update&amp;quot;, name=&amp;quot;update&amp;quot;, condition=&amp;quot;context.getMethod() in [&#39;GET&#39;, &#39;HEAD&#39;] and request.headers.get(&#39;User-Agent&#39;) matches &#39;/firefox/i&#39;&amp;quot;)
 */
public function updateAction()
{
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;YAML&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;update:
    path:     /update
    defaults: { _controller: AppBundle:Article:update}
    condition: &amp;quot;context.getMethod() in [&#39;GET&#39;, &#39;HEAD&#39;] and request.headers.get(&#39;User-Agent&#39;) matches &#39;/firefox/i&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样配置的路由规则就只允许Firefox浏览器访问了。&lt;/p&gt;

&lt;h2 id=&#34;生成url&#34;&gt;生成URL&lt;/h2&gt;

&lt;p&gt;路由嘛，当然是双向的，一方面从URL到controller，一方面从controller到URL。前面讲的都是从URL到controller，那从controller回到URL应该怎么做呢？&lt;/p&gt;

&lt;p&gt;以&lt;code&gt;/show&lt;/code&gt;路径为例，可以&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$this-&amp;gt;get(&#39;router&#39;)-&amp;gt;generate(&#39;/show&#39;);
$this-&amp;gt;container-&amp;gt;get(&#39;router&#39;)-&amp;gt;generate(&#39;/show&#39;);
$this-&amp;gt;generateUrl(&#39;/show&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前两种方式其实是用到了Service Container，现在我对它的理解就是一个可以全局访问的类，由于要统一管理，所以就搞了个Container。一个系统中可以定义多个Service Container，但它如果不被访问时是不会创建的，而一旦创建，默认情况下就再次用它时返回的就还是之前的那个了，这就是所谓的共享型Service Container。而最后一种只不过是一种快捷方式了，本质上还是上面那样的实现。&lt;/p&gt;

&lt;p&gt;多说一点，上面三种方式生成的URL都一样，&lt;code&gt;/app_dev.php/show&lt;/code&gt;，但如果加上参数就不太一样了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;show:
    path:     /show/{id}
    defaults: { _controller: AppBundle:Article:show, id:20 }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;    $url = $this-&amp;gt;generateUrl(&#39;show&#39;,
            array(
                &#39;id&#39; =&amp;gt; 10,
                &#39;page&#39; =&amp;gt; 100,
            ));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出是&lt;code&gt;/app_dev.php/show/10?page=100&lt;/code&gt;，也就是说，如果在&lt;code&gt;generateUrl&lt;/code&gt;的第二个参数数组中出现了路由规则中没有定义的参数，该参数就会以query_string的形式存在了。&lt;/p&gt;

&lt;p&gt;要查看路由规则列表，可以用&lt;code&gt;bin/console debug:router&lt;/code&gt;。可不能小看这个console工具，以后的很多地方都要用到它呢。&lt;/p&gt;

&lt;p&gt;好了，现在基本上和路由相关的东西都介绍完了，如果想继续研究的话，就得看Route Component的文档了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Symfony一对多关系的YAML配置</title>
      <link>http://unixera.com/symfony/2015-11-01-Symfony%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E7%9A%84YAML%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 01 Nov 2015 16:11:21 +0000</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://unixera.com/symfony/2015-11-01-Symfony%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E7%9A%84YAML%E9%85%8D%E7%BD%AE/</guid>
      <description>

&lt;h1 id=&#34;用yaml方式配置对象关系&#34;&gt;用YAML方式配置对象关系&lt;/h1&gt;

&lt;p&gt;这段时间在学习Symfony，看了Symfony Book和Symfony Cookbook，现在准备自己实现一个简单的博客系统，做一些简单的设计。&lt;/p&gt;

&lt;h2 id=&#34;分析对象关系&#34;&gt;分析对象关系&lt;/h2&gt;

&lt;p&gt;首先考虑会操作哪些对象。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;文章 Article&lt;/li&gt;
&lt;li&gt;用户 User&lt;/li&gt;
&lt;li&gt;评论 Comment&lt;/li&gt;
&lt;li&gt;分类 Category&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;文章&#34;&gt;文章&lt;/h3&gt;

&lt;p&gt;对文章来说，它包含的属性有&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 标题
- 概要
- 正文
- 作者
- 创建时间
- 更新时间
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而作者是属于用户的，其属性不应该在Article对象中，分析文章和作者的关系，应该是一篇文章只能有一个作者，而一个作者可以写很多篇文章，这就是doctrine中的OneToMany和ManyToOne了。总感觉用Annotation的方式写这个关系不是那么明确，所以今天特意用yml配置文件的方式来实现这个概念。后面再详细说，这里要清楚的是对文章来说&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 文章对评论 OneToMany
2. 文章对作者 ManyToOne
3. 文章对分类 ManyToOne
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;用户&#34;&gt;用户&lt;/h3&gt;

&lt;p&gt;对用户来说，包含的属性有&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 用户名
- 密码
- 昵称
- 角色
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前面已经说过，用户可以创建多篇文章，因此&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 用户对文章 OneToMany
2. 用户对评论 OneToMany
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;评论&#34;&gt;评论&lt;/h3&gt;

&lt;p&gt;对评论来说，包含的属性有&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 标题
- 内容
- 作者
- 创建时间
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和文章一样，它和作者是多对一的关系&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;评论对作者 ManyToOne&lt;/li&gt;
&lt;li&gt;评论对文章 ManyToOne&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;分类&#34;&gt;分类&lt;/h3&gt;

&lt;p&gt;对分类来说，只有一个属性（最简单的情况）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 分类名称
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它和文章是一对多的关系&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 分类对文章 OneToMany
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;

&lt;p&gt;这样，四个对象的关系就很明确了。具体到用yml来实现这些关系要注意的有两点。
以用户和文章的关系为例。&lt;/p&gt;

&lt;h3 id=&#34;onetomany&#34;&gt;OneToMany&lt;/h3&gt;

&lt;p&gt;在YourBundle/Resources/config/doctrine/User.orm.yml中，除了user表自身的属性配置之外，还要加上以下配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    oneToMany:
        articles:
            targetEntity: Artcile
            mappedBy: user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了便于理解这段的意思，我们可以给&lt;code&gt;oneToMany&lt;/code&gt;加上一个主语——user，就可以这样理解了：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一个user对应多个articles，articles对应的Entity是Article，articles是被user映射的（这个map是doctrine定义的叫法，相应的是inversedBy，没法解释了。。。。）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这时对应的数据表是没有任何变化的，这只是声明了实体之间有这种关系，但并没有表现在数据库中。
那么，既然有了用户对文章是一对多，那么必然存在文章对用户是多对一，即，数据表的变化需要两方面的配置才能生效。&lt;/p&gt;

&lt;h3 id=&#34;manytoone&#34;&gt;ManyToOne&lt;/h3&gt;

&lt;p&gt;在YourBundle/Resources/config/doctrine/Article.orm.yml中，除了article表自身的属性外，还要加上如下配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    manyToOne:
        user:
            targetEntity: User
            inversedBy: articles
            joinColumn:
                name: user_id
                referencedColumnName: id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样，我们还给这段配置加上主语articles来理解&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;articles对应一个userser对应的实体是User，对应User.orm.yml中的mappedBy: user的就是inversedBy: articles。注意另外一个对应，manyToOne下第一级的user是对应OneToMany中的mappedBy: user，而这里的inversedBy: articles对应User.orm.yml中的oneToMany下第一级的articles。下面就是最重要的改变数据表的配置了，在article表中插入一个名为user_id的列，而这一列对应
user表中的id&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;写完这些，再执行&lt;code&gt;app/console doctrine:generate:entities YourBundle&lt;/code&gt;就会看到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Updating database schema...
Database schema updated successfully! &amp;quot;10&amp;quot; queries were executed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的输出了，再连上数据库看下，就会发现相应的表结构都已经变了。&lt;/p&gt;

&lt;h2 id=&#34;总结和练习&#34;&gt;总结和练习&lt;/h2&gt;

&lt;p&gt;如前面所说的，这四个对象之前的关系可不止上面写的这些，作为练习，请读者把其他的关系也用yml的方式配置出来吧。&lt;/p&gt;

&lt;p&gt;本文所用的代码位于[symfony练习题]&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
