<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on Me &amp; Web</title>
    <link>http://lovelock.coding.me/categories/ios/index.xml</link>
    <description>Recent content in Ios on Me &amp; Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2013-2016 Frost Wong. All rights reserved.</copyright>
    <atom:link href="/categories/ios/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iOS8及以下使用NSURLConnectionDelegate实现网络请求</title>
      <link>http://lovelock.coding.me/ios/iOS-Network-Request-with-NSURLConnectionDelegate/</link>
      <pubDate>Mon, 13 Jul 2015 20:20:18 +0000</pubDate>
      
      <guid>http://lovelock.coding.me/ios/iOS-Network-Request-with-NSURLConnectionDelegate/</guid>
      <description>&lt;p&gt;花了点时间把iOS的网络请求算是有了一点肤浅的认识，在这个夜深人静的晚上记录以下。&lt;/p&gt;

&lt;p&gt;首先，用到的类有&lt;code&gt;NSURLRequest&lt;/code&gt;和&lt;code&gt;NSURLConnection&lt;/code&gt;，遵循的协议&lt;code&gt;NSURLConnectionDelegate&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NSURLConnectionDelegate&lt;/code&gt;在iOS9中已经废弃了，取而代之的是&lt;code&gt;NSURLSessionDelegate&lt;/code&gt;，由于我这次适配的是iOS8.3，所以抽时间再写关于后者的用法。&lt;/p&gt;

&lt;p&gt;简明的说一下流程：
&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/iOS-network.jpg&#34; alt=&#34;iOS发送网络请求简单流程图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;发送请求这步其实经常会用到，但作为一款App，它需要的通常不是&lt;strong&gt;让服务器做什么改变&lt;/strong&gt;，而是&lt;strong&gt;从服务端获取信息&lt;/strong&gt;。因此，发送网络请求其实最重要的是怎样处理请求返回的结果。&lt;/p&gt;

&lt;p&gt;在图中用等宽字体显示的函数就是&lt;code&gt;NSURLConnectionDelegate&lt;/code&gt;定义的方法。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;connection:didReceiveResponse:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个方法也就是对服务器的响应做一个判断，通知该类（这里不知道应该怎么描述，是通知谁？）发送的请求服务器端已经给出响应。这时需要做初始化的工作了。我发发送请求就是为了得到数据，那么数据存在哪里呢？从&lt;code&gt;connection:didReceiveData:&lt;/code&gt;的函数定义可以看到返回的数据是在这个函数的参数中，就需要一个可以全局访问的变量来保存数据，以在其余的流程里继续使用。而初始化又有问题，如何保证你这个全局变量不是已经被赋值呢？&lt;/p&gt;

&lt;p&gt;判断是否为NULL，如果为NULL，则初始化一个新的变量，否则，将变量的程度设置为0，其实也就是清空变量中存储的值。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;connection:didReceiveData:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个方法是对服务器返回的数据做处理。其实就是一个简单的赋值操作，将返回值赋给上面提到的变量。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;connectionDidFinishLoading&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个方法才是最重要的，顾名思义，它用来处理最终你获取到的数据要干什么。比如把它赋给某个Label显示出来了，比如再次发送一个请求了。这里我只是要把整个流程走通，所以只是简单的把它的返回值赋给了当前视图中的一个Label。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;提一下一个小的技巧
如何在日志中看到请求返回的结果？&lt;/p&gt;

&lt;p&gt;要知道，返回的结果是一个&lt;code&gt;NSData&lt;/code&gt;数据类型，无法在NSLog函数里打印（其实是可以打印的，不过打出的结果是16进制的字符，人眼也看不懂），但如果你只是想比较一下两次的请求返回值不同，那么可以直接用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSLog(@&amp;quot;%@&amp;quot;, data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而如果要具体的看到返回值的内容，则要做进一步的处理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString *strData = [NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
NSLog(@&amp;quot;%@&amp;quot;, strData);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK，简单的就是这样。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UIImagePickerControllerUsage</title>
      <link>http://lovelock.coding.me/ios/UIImagePickerControllerUsage/</link>
      <pubDate>Sun, 12 Jul 2015 16:27:05 +0000</pubDate>
      
      <guid>http://lovelock.coding.me/ios/UIImagePickerControllerUsage/</guid>
      <description>&lt;p&gt;周末两天完全没闲着，研究iOS研究的头都要裂了。&lt;/p&gt;

&lt;p&gt;这次先说说UIImagePickerController这个类。&lt;/p&gt;

&lt;p&gt;首先，它的作用是拍摄，既可以拍照片也可以录像。&lt;/p&gt;

&lt;p&gt;基本流程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;让你的类实现两个协议(&lt;code&gt;protocol&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UINavigationControllerDelegate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIImagePickerControllerDelegate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;在storyboard中添加一个按钮，并给这个按钮绑上一个&lt;code&gt;IBAction&lt;/code&gt;，就叫做&lt;code&gt;takePictures&lt;/code&gt;吧。&lt;/li&gt;
&lt;li&gt;实现这个&lt;code&gt;takePictures&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    // 判断当前的设备是否支持UIImagePickerControllerSourceTypeCamera，也就是是不是有摄像头，目前在网上能看到的代码里这一点都会做个判断，我觉得较早之前为iPod写程序并且要兼容iPhone时有需要，现在可能就已经不需要了，还有谁的iPhone没有摄像头啊
    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {
    // 指定委托代理
        videoPicker.delegate = self;
    // 指定使用摄像头，因为sourceType还可能有UIImagePickerControllerSourceTypePhotoLibrary和UIImagePickerControllerSourceTypeSavedPhotosAlbum两种，而这两种是从手机上保存的照片中选择照片
        videoPicker.sourceType = UIImagePickerControllerSourceTypeCamera;
    // 这个是指定媒体的类型，也就是静态图片、视频、甚至无声视频这些
    // 在XCode的提示里有两个类型可能会引起混淆，kUTTypeMovie和kUTTypeVideo，你不看文档一定想不到两个的区别——前者是有声视频，后者则只有图像，没有声音
        videoPicker.mediaTypes = [NSArray arrayWithObjects:(NSString *)kUTTypeMovie, nil];
        // 这一步很关键，执行了这个拍照的界面才会在手机上呈现出来
        [self presentViewController:videoPicker animated:YES completion:nil];
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;保存拍摄的照片或视频
这个依赖于前面实现的协议&lt;code&gt;UIImagePickerControllerDelegate&lt;/code&gt;，该协议有一个&lt;code&gt;imagePickerController:didFinishPickingMediaWithInfo&lt;/code&gt;方法，我们要做的保存动作就在这个方法里实现。
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;- (void)imagePickerController:(nonnull UIImagePickerController *)picker didFinishPickingMediaWithInfo:(nonnull NSDictionary&amp;lt;NSString *,id&amp;gt; *)info {
    // 获取拍摄的媒体的类型
    NSString *mediaType = [info objectForKey:UIImagePickerControllerMediaType];
    // 判断拍摄的媒体的类型
    if ([mediaType isEqualToString:(NSString *) kUTTypeMovie]) {
    // 获取要保存的文件的路径
        NSURL *movieURL = [info objectForKey:UIImagePickerControllerMediaURL];
    // 保存，后面的三个参数是用来处理异常的，这里只是一个demo，暂时忽略它们
        UISaveVideoAtPathToSavedPhotosAlbum([movieURL relativePath], nil, nil, nil);
        
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成了上面的方法之后，拍摄的视频就会保存在Camera Roll里面了。但是这个项目还不完整，因为点了use，也就是保存了拍摄的东西之后App的还是停留在取景器界面，具体细节再慢慢研究。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
